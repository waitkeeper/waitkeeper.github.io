[{"categories":null,"content":"区块链Aptos入门教程","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"[toc] Aptos公链简介 Aptos是由 Diem 原团队成员成立的新公链项目. Aptos的目标是建立一个更具可扩展性的区块链，使用Move编程语言以及BFT共识协议，旨在为数十亿用户提供服务，尽早满足大型企业客户的需求。 ==A Layer 1 for everyone. Building the safest and most scalable Layer 1 blockchain.== 官网：https://aptoslabs.com/ Github：https://github.com/aptos-labs/ 开发者网络：https://aptos.dev/ REST API：https://fullnode.devnet.aptoslabs.com 水龙头：https://faucet.devnet.aptoslabs.com 区块链浏览器：https://explorer.devnet.aptos.dev/ 开发者网络状态：https://status.devnet.aptos.dev/ 全节点中提供的RESTful API规范文档：https://fullnode.devnet.aptoslabs.com/spec.html#/ REST API: https://github.com/aptos-labs/aptos-core/blob/main/api/doc/openapi.yaml https://github.com/aptos-labs/aptos-core/tree/main/api 1 基本概念 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:0:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"账号（Accounts） 账号：16字节地址标识 账号：是Move模块和Move资源的容器 每个帐号的状态包括代码和数据： 代码（Code）：Move模块包含代码（类型type和过程procedure声明），但它们不包含数据。该模块的procedures对更新区块链全局状态的规则进行编码。 数据（Data）：Move资源包含数据但没有代码。每个资源值都有一种类型。 一个帐号可以包含任意数量的 Move 资源和 Move 模块。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:1:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"初始化帐号 16个字节长的帐号地址：从该帐号的初始公共验证密钥（initial public verification key(s)）导出。 aptos支持两种签名方案：Ed25519（用于单一签名交易）和MultiEd25519（用于多重签名交易）。 每个帐号都保存一个顺序号（sequence_number），sequence_number代表下一个交易序列号，以防止交易的重放攻击。帐号创建时将sequence_number初始化为0。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:1:1","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"认证密钥 每个帐号都会保存一个身份验证密钥。此身份验证密钥使帐号所有者能够轮换(rotate)与帐号相关联的私钥，而无需更改其帐号的地址。在轮换期间，身份验证密钥根据新生成的私钥-公钥对进行更新。 单一签名验证 生成认证密钥和帐号地址的过程: 生成密钥对：首先生成一个密钥对(pubkey_A, privkey_A)，具体方法参考：RFC 8032. 导出32字节的认证密钥：auth_key = sha3-256(pubkey_A | 0x00), 0x00代表单一签名。auth_key的前16个字节是认证密钥前缀（authentication key prefix），后16个字节是帐号地址。 任何创建帐号的交易都需要帐号地址和认证密钥前缀；与现有帐号交互的交易只需要帐号地址即可。 多重签名验证 多重签名：使用K-of-N多重签名认证，账户总共有N个签名人，至少K个签名认证后才能进行交易。 创建K-of-N多签名认证密钥过程: 生成密钥对:生成N个ed25519公共密钥p_1, ..., p_n 导出32字节的认证密钥: auth_key = sha3-256(p_1 | … | p_n | K | 0x01), 0x00代表多重签名，k表示至少k个以上签名认证才能进行交易。auth_key的前16个字节是认证密钥前缀（authentication key prefix），后16个字节是帐号地址。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:1:2","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"帐号资源 Aptos中帐号数据存储在资源中。初始资源是帐号数据本身(身份验证密钥authentication key和序列号sequence_number)。创建帐号后，可以添加代币或NFT等额外资源。 为了创建帐号，Aptos testnet需要帐号的公钥（public key）和一定数量的TestCoin(https://github.com/aptos-labs/aptos-core/blob/5d80b0d5fe09dbbf3e190459cdc376e8333ad6a3/aptos-move/framework/aptos-framework/sources/TestCoin.move#L152)来添加到该帐号，从而使用这两种资源创建一个新帐号。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:1:3","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"事件（Events） 事件用于获取交易的执行情况，它在交易执行过程中发出，每个Move模块都可以定义自己的事件以及发出事件的时间。 例如，在代币转账过程中，发送方和接收方的帐号将分别发出SentEvent和ReceivedEvent事件。事件发出的数据被保存在区块链账本中，可以通过REST接口的Get events by event（https://fullnode.devnet.aptoslabs.com/spec.html#/operations/get_events_by_event_handle）句柄进行查询。 事件查询示例： 查询帐号地址：0x458bbba3a14d8028ca2c681428b5a846的交易信息（已经向另一帐号地址发送了一笔交易）。 REST 接口的查询方式：https://fullnode.devnet.aptoslabs.com/accounts/458bbba3a14d8028ca2c681428b5a846/events/0x1::TestCoin::TransferEvents/sent_events 输出的JSON信息如下： [ { \"key\": \"0x0000000000000000458bbba3a14d8028ca2c681428b5a846\", \"sequence_number\": \"0\", \"type\": \"0x1::TestCoin::SentEvent\", \"data\": { \"amount\": \"1000\", \"to\": \"0xba255632c944553eb275a2a96ac61a00\" } } ] key:每一个注册的事件拥有唯一的key。上例中的key(0x0000000000000000458bbba3a14d8028ca2c681428b5a846)映射到帐号0xcaa60eb4a01756955ab9b2d1caca52ed的事件（0x1::TestCoin::TransferEvents/sent_events）上。 可以通过事件key来查询事件详情：https://fullnode.devnet.aptoslabs.com/accounts/458bbba3a14d8028ca2c681428b5a846/events/0x1::TestCoin::TransferEvents/sent_events.输出结果同上。 sequence_number:从0开始的递增序号 type: 事件类型。多个事件可以有相同或相似的事件类型，尤其是在使用泛型的时候（especially when using generics）。 data：事件内包含的具体数据。一般原则是包含所有必要的数据，以便理解资源的变化情况。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:2:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"全节点（FullNodes） Aptos节点： 节点用来跟踪Aptos区块链的状态。 客户端通过Aptos节点与区块链进行交互。 两种节点类型： Validator nodes：验证器节点 FullNodes：全节点 每个Aptos节点都包括如下逻辑组件: REST service Mempool: 它保存已提交给区块链但尚未达成一致或执行的交易的内存缓冲区。该缓冲区在验证器节点和FullNodes之间复制。 FullNode的JSON-RPC服务将交易发送到验证器节点的Mempool。 Mempool对交易执行各种检查，以确保交易的有效性并防止DOS攻击。 当一个新交易通过初始验证并被添加到Mempool中时，它将被分发到网络中其他验证器节点的Mempool中。 当一个验证节点暂时成为共识协议中的领导者时，共识协议从内存池中拉出交易，并提出一个新的交易块。该块被广播给其他验证器，并且包含该块中所有交易的总排序。然后每个验证器执行这个块，并提交投票决定是否接受这个新的块提议。 Consensus (disabled in FullNodes):该组件负责对交易块进行排序并通过与网络中的其他验证器节点一起参与consensus协议来对执行结果达成一致。 Execution：该组件协调交易块的执行并维护瞬态。对这种短暂状态的一致投票。在consensus将块提交给分布式数据库之前，Execution会维护执行结果的内存表示。Execution使用虚拟机来执行交易。Execution充当系统输入(由交易表示)、存储(提供持久层)和虚拟机(用于执行)之间的粘合层。 Virtual Machine：用于在每个交易中运行Move程序，并确定执行结果。节点的Mempool使用VM对交易执行验证检查，而Execution使用VM执行交易。 Storage：将一致同意的交易块及其执行结果保存到本地数据库中。 State synchronizer：节点使用该组件来“赶上”区块链的最新状态并保持最新。 Aptos-core软件（https://github.com/aptos-labs/aptos-core）可以配置为作为验证器节点或全节点来运行。 任何人都可以运行FullNodes。FullNodes重新执行Aptos区块链历史上的所有交易。全节点通过与上游参与者(例如，其他全节点或验证器节点)同步来复制区块链的整个状态。为了验证区块链状态，FullNodes需要接收由验证器签名的交易集和Merkle累加器的根哈希。 此外，FullNodes接收Aptos客户端提交的交易，并将它们直接(或间接)转发给验证器节点。 全节点和和验证器节点代码相同，但是全节点不参与区块链共识。 第三方区块链浏览器、钱包、交易所和DApps可以通过运行本地全节点实现如下功能： 利用全节点提供的REST接口进行区块链交互。 获得Aptos账本的一致视图。 避免对读取流量的速率限制。 对历史数据运行自定义分析。 获得特定的链上事件的通知。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:3:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"Gas和交易費 在Aptos区块链上执行交易时，使用gas来跟踪和度量资源的使用情况。 Gas可以确保在Aptos区块链上运行的Move程序最终能够终止，以达到限制Move程序所使用的计算资源的目的。Gas还提供收取交易费的能力（基于执行期间消耗的资源）。 当客户端向Aptos区块链提交要执行的交易时，需要指定如下字段: max_gas_amount: 消耗的最大gas数量。实现对计算资源的限制。gas消耗达到上线，程序终止。 gas_price: 指定gas价格，即一个gas代表多少gas currency gas_currency: 指定交易费使用的货币。 向客户端收取的最大交易费用计算公式：gas_price * max_gas_amount。 gas_price 和 max_gas_amount 随着Aptos区块链的资源供需变化而产生波动。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:4:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"资源使用类型 gas系统需要跟踪交易使用的主要资源。将交易使用的资源分为3个维度: 计算成本：执行交易的计算成本。 网络成本：通过Aptos生态系统传播交易的网络成本。 存储成本：Aptos区块链上交易执行过程中创建和使用的数据的存储成本。 计算成本和网络成本是暂时性的。存储则是长期性的，一旦分配了数据，该数据将一直存在，直到被删除。对于帐号来说，数据是永久存在的。 这三个资源维度都可以独立波动，它们的gas price相同。必须正确跟踪每个维度的gas使用量，gas price仅作为总gas使用量的单一乘数。因此，交易的gas使用需要与执行交易的真实成本密切相关。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:4:1","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"用gas计算交易费用 发送交易时，交易费(以指定的gas货币表示)是gas价格乘以资源使用量（由虚拟机给出此交易需要消耗的gas数量）。 上图表中，序言（prologue）和尾声（epilogue）不被计量（unmetered）： 序言（prologue）：在序言中，不知道提交交易的账户是否有足够的资金，或者提交交易的用户是否对提交账户拥有权限。由于缺乏这种知识，当prologue被执行时，它需要不被计量。在prologue中失败的交易扣除gas可能会导致未经授权的账户扣除。 尾声（epilogue）：负责从提交账户中扣除执行费并分发。因此，即使交易执行已耗尽gas，epilogue也必须运行。同样，我们在扣除提交账户时不希望耗尽gas，因为这将导致在不收取任何交易费用的情况下执行额外的计算。 In the prologue, it’s not known if the submitting account has sufficient funds to cover its gas liability, or if the user submitting the transaction even has authority over the submitting account. Due to this lack of knowledge, when the prologue is executed, it needs to be unmetered. Deducting gas for transactions that fail the prologue could allow unauthorized deductions from accounts. The epilogue is in part responsible for debiting the execution fee from the submitting account and distributing it. Because of this, the epilogue must run even if the transaction execution has run out of gas. Likewise, we don’t want it to run out of gas while debiting the submitting account as this would cause additional computation to be performed without any transaction fee being charged. 因此，最低交易费MIN _TXN_FEE，要能够支付运行prologue和epilogue的平均成本。 prologue执行后，我们已经部分核实了该账户可以支付其gas债务,交易流程的其余部分从\"gas tank\"加满max_gas_amount开始。收取MIN_TXN_FEE之后，然后VM执行的每条指令都从\"gas tank\"中收取费用，直到: 第一种情况：交易执行完成后，收取存储交易数据的费用，运行epilogue 部分并扣除执行费用。正常执行完毕，费用被收取，交易结果被持久化在Aptos区块链上 第二种情况：“gas tank\"变空时，抛出OutOfGas错误。抛出错误，停止执行，然后，收集交易的总gas负债。 In the former, the fee is collected and the result of the transaction is persisted on the Aptos Blockchain. In the latter, the execution of the transaction stops when the error is raised. After which, the total gas liability of the transaction is collected. No other remnants of the execution are committed other than the deduction in this case. ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:4:2","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"用gas改变交易执行的优先级 交易发起时，根据不同的标准对交易执行的优先级：aptos使用使用标准化的gas price来确定交易执行的优先级。 对于非治理交易（non-governance transactions）来说，gas price首先被标准化（normlize）为Aptos Coins（通过使用存储在链上的当前gas货币(gas currency)到Aptos Coins的转换率来完成），例如，同时有如下两笔交易被提交： Bob发送了一笔交易：gas_price = 10, gas_currency 是 “BobCoins”. Alice发送了一笔交易：gas_price = 20, gas_currency 是 “AliceCoins”. 假设：“BobCoins”到Aptos Coins的链上转换率为2.1，“AliceCoins”到Aptos Coins的链上转换率为1。那么： Bob发送的交易的标准化gas price为：10 * 2.1 = 21 Alice发送的交易的标准化gas price为：20 * 1 = 20 所以，Bob的交易优先级币Alice的交易优先级更高。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:4:3","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"核心设计原则 Aptos和Move的gas设计遵循三个核心原则: 设计原则（Design Principle） 描述 Move是图灵完备的语言 因此，确定一个给定的Move程序是否终止不能静态地决定. 但是，确保（1）每个字节码指令都有一个非零的gas消耗；（2）任何程序启动时绑定的gas数量都是有限的 阻止DDoS攻击并鼓励恰当地使用网络 交易的gas使用与该交易的资源消耗相关。gas价格以及交易费用应该随着网络中的竞争而上下波动。在发布时，我们预计gas价格为零或接近零。但是在高度竞争的时期，可以使用gas价格来区分交易的优先级，鼓励在这种时期只发送重要的交易。 项目的资源使用需要达成共识 这意味着计算资源消耗的方法需要具有确定性。这排除了跟踪资源使用的其他方法，例如周期计数器或任何类型的基于时间的方法，因为它们不能保证在节点之间是确定的。跟踪资源使用的方法需要是抽象的。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:4:4","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"证明（Proof） Aptos区块链使用proofs作为验证区块链数据真实性和正确性的方式。 Aptos区块链中的所有数据都存储在单版本分布式数据库中。每个验证器和FullNode的存储负责将一致同意的交易块及其执行结果保存到数据库中。区块链被表示为一棵不断增长的Merkle树，树的每一片叶子代表区块链执行的一个交易。 区块链执行的所有操作和所有账户状态都可以用密码验证。这些加密的proofs确保验证器节点在状态上一致。通过支持proofs，客户端不需要信任从其接收数据的实体。 例如，如果client从一个账户中取出最新的n笔交易，一个证据(proof)可以证明在响应中没有交易被添加、省略或修改。客户端还可以查询帐号的状态，询问是否处理了特定的交易，等等。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:5:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"节点网络与同步 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:6:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"节点网络拓扑 Validator节点和FullNodes形成了一个层次结构，validator节点位于根节点，FullNodes可以位于其他任何位置。 Aptos区块链区分了两种类型的FullNodes: 验证器全节点（Validator FullNodes）：Validator FullNodes直接连接到validator nodes，并提供可扩展性和缓解DDoS攻击。 公共全节点（Public FullNodes）：公共全节点连接到验证器全节点(或其他公共全节点)，以获得对Aptos网络的低延迟访问。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:6:1","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"独立的网络栈 Aptos区块链支持不同网络拓扑的不同网络堆栈。例如，验证器网络独立于全节点网络。 独立网络栈的优势： 不同网络之间的清晰分离。 更好地支持安全首选项(e.g., bidirectional vs server authentication). 允许隔离发现协议：(验证器节点公共端点的链上发现 vs 私有组织的手动配置)(i.e., on-chain discovery for validator node’s public endpoints vs. manual configuration for private organizations). ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:6:2","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"节点同步 Aptos节点通过两种机制同步到Aptos区块链的最新状态:共识(consensus)或状态同步(state synchronization)。验证器节点将使用这两种机制来保持最新状态，而FullNodes只使用状态同步(state synchronization)。 例如，当Validator节点第一次联机或重启时(例如，在脱机一段时间后)，它将调用状态同步。一旦验证器更新了区块链的最新状态，它将开始参与共识并完全依赖共识来保持更新。全节点仅仅依赖状态同步来获得并保持最新的区块链状态。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:6:3","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"状态同步器 每个Aptos节点都包含一个状态同步器组件（https://github.com/aptos-labs/aptos-core/tree/main/state-sync），用于将节点的状态与其对等节点同步。该组件对所有类型的Aptos节点都具有相同的功能:它利用专用的对等网络不断请求和传播区块链数据。 验证器节点在验证器节点网络内分发区块链数据，而全节点依赖于其他全节点(即验证器全节点或公共全节点)。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:6:4","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"同步API Aptos节点的状态同步器与其他节点的状态同步器通信，以获取和发送交易块。在这里了解更多关于这是如何工作的规范。 https://github.com/aptos-labs/aptos-core/tree/main/documentation/specifications/state_sync ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:6:5","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"交易与状态 交易(transactions)和状态(states)是Aptos区块链两个核心的基本概念： Transactions：交易代表Aptos区块链上账户之间的数据交换(如:Aptos Coins或NFT)。 States：状态(即，当前区块链账本状态)代表当前区块链的快照。 执行交易时，Aptos区块链的状态会发生变化。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:7:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"Transactions 当Aptos区块链客户端提交交易时，他们请求用他们的交易更新账本状态。 区块链上的一笔签名交易包含以下信息: Signature: 发送者使用数字签名来验证他们签署了交易(即认证). Sender address: 交易发起者的地址. Sender public key: 交易发起者的公钥（与签名本交易的私钥对应的公钥）。 Program: 程序包括一下内容: Move模块和函数名或Move字节码交易脚本 脚本的可选输入列表。对于点对点交易，包含收款人信息和金额。 要发布的Move字节码模块的可选列表。 Gas price (in specified currency/gas units):发送者愿意支付的每单位gas对应的金额（也就是一个gas多少钱）。gas是支付计算和存储的一种方式。 Maximum gas amount: 该交易消耗gas数量的上限。 Gas currency code: 用于支付gas费用的货币代码。指定的货币最终需要按照链上比率换算成Aptos Coins Sequence number: 这是一个无符号整数，在执行时必须等于发送方的帐号中的sequence number（每发送一笔交易其值增1）。 Expiration time: 一个时间戳，在该时间戳之后，交易将不再有效。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:7:1","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"账本状态 Aptos区块链的账本状态(或者称为:global state)包括区块链所有账户的状态。 区块链中的每个验证器节点必须知道最新版本的区块链分布式数据库(版本化数据库)的全局状态，才能执行交易。（未同步节点不允许执行交易） ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:7:2","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"版本化数据库 Aptos区块链中的所有数据都保存在一个单一版本的分布式数据库中。版本号为一个无符号64位整数，对应于系统已经执行的交易数量。 此版本化数据库(versioned database)允许验证器节点: 根据最新版本的账本状态执行交易 响应客户端关于当前版本的查询，响应之前版本历史的查询。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:7:3","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"交易改变状态 下图展示了交易T_n如何将账本状态从S_n-1改变到S_n: 图中的F这是一个确定性的函数。对于特定的初始状态和一个特定的交易，F总是返回相同的最终状态。 Aptos使用Move语言实现确定性执行函数F。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:7:4","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"验证器节点 Aptos节点： 节点用来跟踪Aptos区块链的状态。 客户端通过Aptos节点与区块链进行交互。 两种节点类型： Validator nodes：验证器节点 FullNodes：全节点 每个Aptos节点都包括如下逻辑组件: REST service Mempool: 它保存已提交给区块链但尚未达成一致或执行的交易的内存缓冲区。该缓冲区在验证器节点和FullNodes之间复制。 FullNode的JSON-RPC服务将交易发送到验证器节点的Mempool。 Mempool对交易执行各种检查，以确保交易的有效性并防止DOS攻击。 当一个新交易通过初始验证并被添加到Mempool中时，它将被分发到网络中其他验证器节点的Mempool中。 当一个验证节点暂时成为共识协议中的领导者时，共识协议从内存池中拉出交易，并提出一个新的交易块。该块被广播给其他验证器，并且包含该块中所有交易的总排序。然后每个验证器执行这个块，并提交投票决定是否接受这个新的块提议。 Consensus (disabled in FullNodes):该组件负责对交易块进行排序并通过与网络中的其他验证器节点一起参与consensus协议来对执行结果达成一致。 Execution：该组件协调交易块的执行并维护瞬态。对这种短暂状态的一致投票。在consensus将块提交给分布式数据库之前，Execution会维护执行结果的内存表示。Execution使用虚拟机来执行交易。Execution充当系统输入(由交易表示)、存储(提供持久层)和虚拟机(用于执行)之间的粘合层。 Virtual Machine：用于在每个交易中运行Move程序，并确定执行结果。节点的Mempool使用VM对交易执行验证检查，而Execution使用VM执行交易。 Storage：将一致同意的交易块及其执行结果保存到本地数据库中。 State synchronizer：节点使用该组件来“赶上”区块链的最新状态并保持最新。 Aptos-core软件（https://github.com/aptos-labs/aptos-core）可以配置为作为验证器节点或全节点来运行。 当交易提交到Aptos区块链时，验证器节点运行分布式共识协议，执行交易，并将交易和执行结果存储在区块链上。验证器节点决定将哪些交易添加到区块链中，以及添加的顺序。 Aptos区块链使用拜占庭容错(BFT,Byzantine Fault Tolerance)共识协议在验证器节点间达成共识。验证器节点处理交易，并将它们包含在区块链数据库的本地副本中。这意味着最新的验证器节点总是在本地维护区块链当前状态的副本。 验证器节点通过专用网络直接与其他验证器节点通信。全节点是最终交易历史的外部验证和/或传播资源。它们接收来自对等体的交易，并在本地重新执行它们(与验证器执行交易的方式相同)。FullNodes将重新执行的交易的结果保存到本地存储。这样，他们可以挑战验证者的任何违规行为，并在有人试图重写或修改区块链历史时提供证据。这有助于减少验证器的腐败(corruption)和/或共谋(collusion)。 AptosBFT共识协议提供了高达三分之一的恶意验证器节点的容错能力。 2 交易（Transactions） ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:8:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"交易的生命周期 本部分内容将从具体操作的角度来深入理解Aptos链上交易的生命周期：从一笔交易被提交给全节点（FullNode）到交易最终上链（即交易被提交到Aptos区块链上并确认交易完成）。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:9:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"假定前提 Alice和Bob在Aptos区块链分别有两个帐号（他们各自对应一个帐号地址） Alice的帐号地址上有110个Aptos代币 Alice向Bob发送10个Aptos代币 Alice帐号当前的sequence number等于5.（5代表：Alice的账号地址已经发送出了5笔交易） Aptos的区块链网络上目前总共有100个验证器（validator）节点：编号从V1到 V100 Aptos客户端（例如，自己编写的Python脚本、web应用程序等）将Alice的交易提交给一个全节点的REST服务。此全节点将该笔交易转发给一个验证器全节点（validator FullNode），验证器全节点再将交易转发给签证器V1：具体过程如下： Aptos client –\u003e Public FullNode –\u003e Validator FullNode —\u003e Validator Node (V1) 验证器`V1称为本笔交易的提议者(propser)/领导者(leader)。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:9:1","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"客户端构建并提交一笔交易 将客户端构建的原始交易(raw transaction)表示为Traw5： Traw5交易的具体内容：==从Alice的账户中给Bob发送10个Aptos代币==。 Aptos客户端使用Alice的私钥对交易进行签名，签名后的交易用T5表示 T5包括下面的内容： 原始交易，即Traw5的内容 Alice的公钥（Alice’s public key） Alice的签名（signature） 原始交易Traw5包括如下字段： 字段(Fields) 描述(Description) Account Address Alice的帐号地址：交易发起者的地址 Move Module 交易要执行的具体操作，包括:1. 一个Move字节码点对点transaction script;2. transaction script的输入列表(本例为，Bob的帐号地址和发送的Aptos代币数量) Maximum gas amount 交易允许支付的最大gas数量。Gas用于支付交易消耗的计算和存储费用。 Gas price Gas价格，即一个 gas 等于多少Aptos代币 Expiration time 交易的过期时间，超过这个期限的交易不会上链 Sequence number sequence number表示由本账户提交的（submitted）并且已经上链的（committed）交易数。本例中，Alice帐号地址已经提交了5笔交易（包括Traw5，本人认为sequence number表示的是下一笔Traw5目前还没有执行）. Chain ID Aptos网络标识符，防止跨网络攻击，devnet的ChainID是3 关于transaction script： 用户提交的每一笔交易都包含一个transaction script transaction script表示客户端需要验证器执行的具体操作： 具体操作可以是：１.转账操作；２.与链上已发布智能合约（Move模块）的交互 transaction script是一个任意程序，通过调用模块内的过程，与Aptos区块链全局存储中发布的资源进行交互。它对交易的逻辑进行编码。 一个transaction script可以向多个收款人发送资金，调用多个不同模块中的过程。 transaction script不存储在全局状态中，并且不能被其他transaction script调用。这是一个一次性程序。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:9:2","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"交易的生命周期 本部分介绍T5交易的生命周期：从客户端提交交易到链上确认（committed）的整个过程。 一笔交易的生命周期要经历如下5个阶段： Accepting：即全节点从Aptos客户端接受交易 Sharing：与其他验证器节点共享交易 Proposing：提出区块（Proposing the block） Executing and Consensus：执行区块并达成共识（Executing the block and reaching consensus） Committing：区块上链（Committing the block） 下面详细介绍上面的5个阶段。 Stage1：接受客户端的交易 过程描述 Aptos节点组件交互 1.Client → REST service: a. 客户机将T5交易提交给全节点的REST Service; b. 全节点将接收到的交易加入自己的内存池mempool,同时交易转发给网络中的其他节点; c. 交易最终将被转发到运行一台验证器全节点（validator Fullnode）上的mempool; d. 验证器全节点再将交易转发给一台验证器节点（validator node，本例中为V1）. 1. REST Service 2.REST service → Mempool: 全节点的REST Service将T5交易传送给验证器节点V1的mempool 2. REST Service, 1. Mempool 3. Mempool → Virtual Machine (VM):Mempool将使用虚拟机(VM)组件来执行交易验证，例如签名验证、帐户余额验证、基于sequence number的抗重放攻击。 4. Mempool, 3. Virtual Machine Stage2：其他验证器节点共享交易 过程描述 对应的Aptos节点组件交互 4. Mempool: mempool将 T5交易保存在内存中缓冲区（memory buffer）中。Mempool内可能已经包含了从Alice地址发出的多笔交易。 Mempool 5. Mempool → Other Validators: 验证器节点V1将使用共享内存池协议shared-mempool protocol, 将其内存池中的交易 (including T5) 共享给其他验证器节点，并且把从其他验证器节点接收到的交易放入自己的mempool 2. Mempool Stage3：提出区块（Proposing the block） 过程描述 对应的Aptos节点组件交互 6. Consensus → Mempool: 验证器节点V1作为T5交易的提议者(leader), 它从自己的mempool中拉取一个交易区块，并且通过共识组件（consensus component）将此区块作为一项提议复制给其他验证器节点。it will pull a block of transactions from its mempool and replicate this block as a proposal to other validator nodes via its consensus component. 1. Consensus, 3. Mempool 7. Consensus → Other Validators: :V1的共识组件负责协调所有验证器就提议区块内的交易顺序达成共识。 2. Consensus Stage4：执行区块并达成共识 过程描述 对应的Aptos节点组件交互 8. Consensus → Execution: 交易区块（块内包括T5和其他交易）被共享给执行组件（execution component） 3. Consensus, 1. Execution 9. Execution → Virtual Machine: 执行组件管理VM中交易的执行。这里的执行是speculatively 发生在区块中的交易达成一致之前。Note that this execution happens speculatively before the transactions in the block have been agreed upon. 2. Execution, 3. Virtual Machine 10. Consensus → Execution: 执行完区块中的交易之后，执行组件把这些区块中的交易（包括T5）追加到Merkle accumulator（of ledger history）。这是一个在内存/临时（in-memory/temporary）版本的Merkle累加器。执行这些交易的提议/推测结果的必要部分被返回到共识组件以达成一致（The necessary part of the proposed/speculative result of executing these transactions is returned to the consensus component to agree on.） 从 “consensus” 到 “execution” 的箭头表示：执行交易的请求是由共识组件发起的。 3. Consensus 11. Consensus → Other Validators: V1 (the consensus leader) attempts to reach consensus on the proposed block’s execution result with the other validator nodes participating in consensus. V1(the consensus leader)尝试和其他参与共识的验证器节点，就V1提议区块的执行结果达成共识。 3. Consensus Stage5：区块上链 过程描述 对应的Aptos节点组件交互 12. Consensus → Execution, Execution → Storage: 如果V1提议的区块的执行结果被达成了共识（结果即被其他验证器节点认可），并且签名的验证器节点数目达到法定的投票数目，V1的执行组件从speculative execution cache中读取建议区块的所有执行结果，这些结果与建议区块中的所有交易信息都被持久化存储。If the proposed block’s execution result is agreed upon and signed by a set of validators that have the quorum of votes, validator V1’s execution component reads the full result of the proposed block execution from the speculative execution cache and commits all the transactions in the proposed block to persistent storage with their results. 4. Consensus, 3. Execution, 4. Execution, 3. Storage 至此，Alice的帐号中拥有100Aptos代币，她的sequence number将变成6. 如果T5交易被Bob重放的话，这笔交易将被拒绝，因为Alice帐号的sequence number = 6比T5交易中的sequence number = 5要大。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:9:3","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"Aptos节点内相关组件之间的交互 本部分对于理解Aptos系统内部的运作机制有帮助，如果希望参与Aptos开源项目的话，这部分内容将会很有用。 这里，我们假设一个Aptos客户端提交一笔交易TN到一个验证器VX。 交易生命周期中使用到的Aptos节点的核心组件如下： FullNode REST Service Validator node Mempool Consensus Execution Virtual Machine Storage REST Service 客户端发出的任何请求： 首先，客户端的任何请求首先发送给给FullNode的REST服务。 然后，FullNode将提交的交易转发给validator FullNode 接着，validator FullNode再将其发送到validator node VX。 1.Client → REST Service 客户端向Aptos FullNode的REST服务提交交易。 2.REST Service → Mempool REST服务将交易转发给validator FullNode，然后validator Fullnode将交易发送给validator node VX的mempool。 只有当TN的sequence number大于或等于发送方账户的当前sequence number时，mempool才会接受交易TN(注意，未满足sequence number条件的交易不会被传递到consensus组件)。 3. REST Service → Storage 客户端查询Aptos区块链的链上数据时，FullNode的REST Service将访问持久化存储组件。例如，查询账户余额。 Virtual Machine(VM) Move 虚拟机负责验证和执行交易脚本（transaction script）。The Move VM verifies and executes transaction scripts written in Move bytecode. 1.Virtual Machine → Storage 当内存池mempool通过调用虚拟机的VM::ValidateTransaction接口来验证一笔交易时，虚拟机从存储中加载交易发送方的帐号，并且完成验证工作，验证要做很多工作，下面仅列出部分内容（完整的工作列表参看：https://github.com/aptos-labs/aptos-core/tree/main/documentation/specifications/move_adapter）： 检查已签名交易的输入签名是否正确(拒绝未正确签名的交易)。 检查发送者的帐户验证密钥是否与公钥(对应于用于签署交易的私钥)的散列相同。 验证交易的序列号是否大于或等于发送方帐户的当前序列号。完成这一检查可以防止对发送者的账户重放相同的交易。 验证签名交易中的程序（program）是否是畸形的（malformed），因为畸形的程序不能被虚拟机执行。 验证发送方的帐户余额大于等于max gas amount * gas price，确保帐号可以为本笔交易所使用的资源付费。 2. Execution → Virtual Machine 执行组件利用VM（通过VM::ExecuteTransaction()）执行交易。 执行交易和更新账本状态并将结果保存在存储器中是不同的，理解这一点很重要。例如：在共识期内，交易TN首先被执行，被当作在区块上达成共识的一个必要步骤而被执行：如果最终和其他验证器节点在交易顺序和交易执行结果达成了共识，最后才将结果永久的保存在存储中，同时还要更新账本状态。 3. Mempool → Virtual Machine 当mempool接收到一笔交易时(可以从其他验证器节点shared mempool得到，也可以是从REST Service接收到到的交易)，mempool通过调用VM的VM::ValidateTransaction()接口来验证这笔交易。 实现细节请参考VM的README文档：https://github.com/diem/move/tree/main/language/move-vm Mempool mempool是一个共享的缓冲区，用来保存哪些等待(waiting)执行的交易。当一笔新的交易添加进mempools时，mempool将交易共享给其他验证器节点。为了降低网络开销，在共享交易时，验证器只负责把自己的交易传递给其他验证器。当验证器从其他验证器节点的mempool接收到一笔交易时，把这笔交易添加进mempool. 1. REST Service → Mempool 从客户机接收到事务后，REST服务将交易代理给一个验证器FullNode。然后，交易被发送到验证器节点的内存池。 仅当TN的序列号大于或等于发送者账户的当前序列号时，验证者节点VX的mempool才接受发送者账户的交易TN。 2. Mempool → Other validator nodes 验证器节点VX的内存池与同一网络上的其他验证器共享交易TN。 其他验证器将它们各自的内存池中的事务与VX的内存池共享。 3. Consensus → Mempool 当交易被转发到一个验证器节点时，一旦该验证器节点成为此交易的领导者，它的共识组件将从它的mempool中拉出一个交易块，并将所提议的区块复制到其他验证器。这样做是为了在提议的区块中的交易排序和交易执行结果上达成共识。 注意，交易TN仅仅是包括在一个新提议的共识区块中，但是它并不保证TN最终能够被持久存储在Aptos块链分布式数据库中。 4. Mempool → VM 当mempool从其他验证器接收到一笔交易时，mempool调用VM上的VM::ValidateTransaction()来验证交易。 实现细节参考Mempool的README文档：https://github.com/aptos-labs/aptos-core/tree/main/documentation/specifications/mempool. Consensus 共识组件负责对交易区块进行排序，并通过与网络中的其他验证者一起参与共识协议来对执行结果达成一致。 1. Consensus → Mempool 当验证者VX是领导者/提议者(leader/proposer)时，VX的共识组件通过mempool::GetBlock()从其Mempool中拉出一个事务块，并形成一个提议的交易区块。 2. Consensus → Other Validators 如果VX是提议者/领导者(proposer/leader)，其共识组件将提议的交易区块复制给其他验证者。 3. Consensus → Execution, Consensus → Other Validators 为了执行交易区块，consensus组件与执行组件进行交互。共识组件通过execute:ExecuteBlock()来执行一个交易区块(参考：Consensus → execution) 在建议的区块中执行交易后，执行组件将这些交易的执行结果作为响应送给共识组件。 共识组件对执行结果进行签名，并尝试与其他验证者就该结果达成一致。 4. Consensus → Execution 如果有足够多的验证者投票赞成同一个执行结果，VX的共识组件通过Execution::CommitBlock()通知执行，这个区块已经准备好，可以提交了。 实现细节请参考共识README文档：https://github.com/aptos-labs/aptos-core/tree/main/documentation/specifications/consensus ####　Execution 执行组件协调一个交易块（通常含多笔交易）的执行，==并维护一个可以一致表决的临时状态(maintains a transient state that can be voted upon by consensus)==。如果这些交易成功，它们将被提交到存储。 1. Consensus → Execution 共识组件通过调用执行组件的Execution::ExecuteBlock()接口来执行一个交易块。 执行维护一个“暂存区”(scratchpad)，其中保存了Merkle累加器(https://aptos.dev/reference/glossary/#merkle-accumulator)相关部分的内存副本。这些信息用于计算Aptos区块链当前状态的根哈希。 将当前状态的根散列与关于所提议的块中的交易的信息相结合，以确定累加器的新的根散列。这是在持久存储任何数据之前完成的，以确保在法定数量的验证者达成一致之前，不会存储任何状态或交易。The root hash of the current state is combined with the information about the transactions in the proposed block to determine the new root hash of the accumulator. This is done prior to persisting any data, and to ensure that no state or transaction is stored until agreement is reached by a quorum","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:9:4","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"与Aptos区块链交互 Aptos用Move虚拟机来执行相关操作。虽然许多区块链实现了一组本地操作，但Aptos将所有的操作都委托给Move来执行（包括:帐户创建、资金转账和发布Move模块）。 为了支持这些操作，构建在Move之上的区块链必须提供一个与区块链交互的框架(类似于计算机的操作系统或最小可用的功能集)。在本节中，我们将讨论这些通过Aptos框架的脚本函数暴露出来的功能集。 本指南(搭配：Move module tutorial，下面的第一个Move模块 )将提供在Aptos区块链上构建丰富应用所需的最少量信息。 注意:Aptos框架正在密集的开发中，这里的内容可能不是最新的。最新的框架可以在源代码中找到：https://github.com/aptos-labs/aptos-core/tree/main/aptos-move/framework/aptos-framework/sources。 Aptos框架内为用户提供的核心功能包括： 发送和接收测试币TestCoin 创建新用户 发布一个新的Move模块 注:本文档假设读者已经熟悉提交交易，在下文的发起第一笔转账交易有详细介绍） ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:10:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"发送和接收TestCoin代币 当提交和执行交易时需要消耗TestCoin代币。可以通过开发者网络水龙头（Devnet Faucet）来获取TestCoin代币。具体的示例参看下文的：发起第一笔转账交易 让区块链去执行一个交易的有效载荷（payload）如下所示： { \"type\": \"script_function_payload\", \"function\": \"0x1::TestCoin::transfer\", \"type_arguments\": [], \"arguments\": [ \"0x737b36c96926043794ed3a0b3eaaceaf\", \"1000\", ] } 上面的示例，告诉Move虚拟机去执行0x1::TestCoin::transfer脚本。第一个参数是接收帐号的地址：0x737b36c96926043794ed3a0b3eaaceaf；第二个参数是发送代币的数量：1000。发出代币的地址就是发出本交易的帐号地址。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:10:1","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"创建一个新账号 告诉区块链创建新账户的有效载荷示例如下： { \"type\": \"script_function_payload\", \"function\": \"0x1::AptosAccount::create_account\", \"type_arguments\": [], \"arguments\": [ \"0x0c7e09cd9185a27104fa218a0b26ea88\", \"0xaacf87ae9d8a5e523c7f1107c668cb28dec005933c4a3bf0465ffd8a9800a2d900\", ] } 上面的示例中，告诉Move虚拟机去执行脚本0x 1::AptosAccount::create _ account。第一个参数是要创建的帐户的地址，第二个参数是身份验证密钥pre-image(在基础知识中的帐号一节有提到)。对于单一签名者身份验证，是与0字节连接的公钥(pubkey_A | 0x00)。这是为了防止账户地址被抢占。该指令的执行验证了认证密钥的后16个字节与16个字节的账户地址相同。我们正在积极改进这个API，以支持32字节的帐户地址，这将消除对土地掠夺或帐户操纵（around land grabbing or account manipulation）的担忧。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:10:2","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"发布一个新的Move模块 告诉区块链发布一个新的Move模块的有效载荷示例如下： \"type\": \"module_bundle_payload\", \"modules\": [ {\"bytecode\": \"0x...\"}, ], 上面的示例，告诉虚拟机在发送者帐号地址下发布Move模块字节码，详见第一Move模块。 注意：Move字节码必须指定与发送方帐户相同的地址，否则交易将被拒绝。==例如，假设帐户地址为0xe110，则需要更新Move模块，因为模块0xe110::Message、模块0xbar::Message将被拒绝(For example, assuming account address 0xe110, the Move module would need to be updated as such module 0xe110::Message, module 0xbar::Message would be rejected.)。或者，可以使用别名地址，例如模块HelloBlockchain::Message，但是HelloBlockchain别名需要在Move.toml文件中更新为0xe110(Alternatively an aliased address could be used, such as module HelloBlockchain::Message but the HelloBlockchain alias would need to updated to 0xe110 in the Move.toml file. )。我们正在与Move团队合作，并计划将一个编译器集成到我们的REST接口中来缓解这个问题。== 3 上手指南（Tutorials） ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:10:3","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"发起第一笔转账交易 https://aptos.dev/tutorials/your-first-transaction 启动本机全节点，并确认节点同步完成： cargo run -p aptos-node –release – -f ./public_full_node.yaml target/release/aptos-node -f ./public_full_node.yaml curl 127.0.0.1:9101/metrics 2\u003e /dev/null | grep aptos_state_sync_version | grep type 涵盖：交易生成、提交和验证链上交易。 创建帐号 REST接口Wrapper Faucet接口Wrapper 构建应用程序，执行并验证 官方提供Python、Rust、Typescript三种编程语言的示例代码。 Python示例代码： https://github.com/aptos-labs/aptos-core/tree/main/developer-docs-site/static/examples/python \u003csource doc directory\u003e/developer-docs-site/static/examples/python/ ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:11:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"第1步：创建帐号 每个aptos帐号有一个唯一的帐号地址（也就是钱包地址）。 每个帐号地址对应：1. 一对公钥-私钥对（public key - private key）；2. 认证密钥（authentication key ）。 class Account: \"\"\"Represents an account as well as the private, public key-pair for the Aptos blockchain.\"\"\" def __init__(self, seed: bytes = None) -\u003e None: if seed is None: self.signing_key = SigningKey.generate() else: self.signing_key = SigningKey(seed) def address(self) -\u003e str: \"\"\"Returns the address associated with the given account\"\"\" return self.auth_key()[-32:] def auth_key(self) -\u003e str: \"\"\"Returns the auth_key for the associated account\"\"\" hasher = hashlib.sha3_256() hasher.update(self.signing_key.verify_key.encode() + b'\\x00') return hasher.hexdigest() def pub_key(self) -\u003e str: \"\"\"Returns the public key for the associated account\"\"\" return self.signing_key.verify_key.encode().hex() 测试生成帐号的代码： root@i-pxsnz3pq:~/aptos/python# ipython3 Python 3.8.10 (default, Nov 26 2021, 20:14:08) Type 'copyright', 'credits' or 'license' for more information IPython 7.13.0 -- An enhanced Interactive Python. Type '?' for help. In [1]: from first_transaction import Account In [2]: alice = Account() In [3]: alice.address() Out[3]: '4ace5af003af0af6893cef1496f428a6' In [4]: alice.pub_key() Out[4]: '23efdd2d4590896563ffdfedd57f4bfc4ac30257ae6c9eb9cee031d5613042a9' In [5]: alice.auth_key() Out[5]: '290a39dd3c2fdb669cafbfbe87a9f9b64ace5af003af0af6893cef1496f428a6' In [6]: ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:11:1","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"第2步：REST API接口 Aptos提供了与区块链交互的REST接口。 https://fullnode.devnet.aptoslabs.com/spec.html https://127.0.0.1:8080/spec.html https://public_ip:8080/spec.html 虽然可以直接调用REST接口实现相关操作，但是使用wrpper更方便。官方示例代码提供了一个简单的REST接口wrapper，以方便的实现：从FullNode检索账本数据（包括帐号和帐号资源数据），构造由JSON格式表示的签名交易等等。 class RestClient: \"\"\"A wrapper around the Aptos-core Rest API\"\"\" def __init__(self, url: str) -\u003e None: self.url = url 2.1 读取帐号信息 def account(self, account_address: str) -\u003e Dict[str, str]: \"\"\"Returns the sequence number and authentication key for an account\"\"\" response = requests.get(f\"{self.url}/accounts/{account_address}\") assert response.status_code == 200, f\"{response.text} - {account_address}\" return response.json() def account_resources(self, account_address: str) -\u003e Dict[str, Any]: \"\"\"Returns all resources associated with the account\"\"\" response = requests.get(f\"{self.url}/accounts/{account_address}/resources\") assert response.status_code == 200, response.text return response.json() 2.2 向链上提交一笔交易 def generate_transaction(self, sender: str, payload: Dict[str, Any]) -\u003e Dict[str, Any]: \"\"\"Generates a transaction request that can be submitted to produce a raw transaction that can be signed, which upon being signed can be submitted to the blockchain. \"\"\" account_res = self.account(sender) seq_num = int(account_res[\"sequence_number\"]) txn_request = { \"sender\": f\"0x{sender}\", \"sequence_number\": str(seq_num), \"max_gas_amount\": \"1000\", \"gas_unit_price\": \"1\", \"gas_currency_code\": \"XUS\", \"expiration_timestamp_secs\": str(int(time.time()) + 600), \"payload\": payload, } return txn_request def sign_transaction(self, account_from: Account, txn_request: Dict[str, Any]) -\u003e Dict[str, Any]: \"\"\"Converts a transaction request produced by `generate_transaction` into a properly signed transaction, which can then be submitted to the blockchain.\"\"\" res = requests.post(f\"{self.url}/transactions/signing_message\", json=txn_request) assert res.status_code == 200, res.text to_sign = bytes.fromhex(res.json()[\"message\"][2:]) signature = account_from.signing_key.sign(to_sign).signature txn_request[\"signature\"] = { \"type\": \"ed25519_signature\", \"public_key\": f\"0x{account_from.pub_key()}\", \"signature\": f\"0x{signature.hex()}\", } return txn_request def submit_transaction(self, txn: Dict[str, Any]) -\u003e Dict[str, Any]: \"\"\"Submits a signed transaction to the blockchain.\"\"\" headers = {'Content-Type': 'application/json'} response = requests.post(f\"{self.url}/transactions\", headers=headers, json=txn) assert response.status_code == 202, f\"{response.text} - {txn}\" return response.json() def transaction_pending(self, txn_hash: str) -\u003e bool: response = requests.get(f\"{self.url}/transactions/{txn_hash}\") if response.status_code == 404: return True assert response.status_code == 200, f\"{response.text} - {txn_hash}\" return response.json()[\"type\"] == \"pending_transaction\" def wait_for_transaction(self, txn_hash: str) -\u003e None: \"\"\"Waits up to 10 seconds for a transaction to move past pending state.\"\"\" count = 0 while self.transaction_pending(txn_hash): assert count \u003c 10, f\"transaction {txn_hash} timed out\" time.sleep(1) count += 1 2.3 应用程序逻辑 def account_balance(self, account_address: str) -\u003e Optional[int]: \"\"\"Returns the test coin balance associated with the account\"\"\" resources = self.account_resources(account_address) for resource in resources: if resource[\"type\"] == \"0x1::TestCoin::Balance\": return int(resource[\"data\"][\"coin\"][\"value\"]) return None def transfer(self, account_from: Account, recipient: str, amount: int) -\u003e str: \"\"\"Transfer a given coin amount from a given Account to the recipient's account address. Returns the sequence number of the transaction used to transfer.\"\"\" payload = { \"type\": \"script_function_payload\", \"function\": \"0x1::TestCoin::transfer\", \"type_arguments\": [], \"arguments\": [ f\"0x{recipient}\", str(amount), ] } txn_request = self.generate_transaction(account_from.address(), payload) signed_txn = self.sign_transaction(account_from, txn_request) res = self.submit_transaction(signed_txn)","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:11:2","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"第3步：水龙头接口 水龙头（Faucet）负责给帐号发放测试token。用户利用测试币来支付gas费、给其他帐号转账等操作。如果指定的帐号不存在，水龙头可以自动创建帐号。 class FaucetClient: \"\"\"Faucet creates and funds accounts. This is a thin wrapper around that.\"\"\" def __init__(self, url: str, rest_client: RestClient) -\u003e None: self.url = url self.rest_client = rest_client def fund_account(self, pub_key: str, amount: int) -\u003e None: \"\"\"This creates an account if it does not exist and mints the specified amount of coins into that account.\"\"\" txns = requests.post(f\"{self.url}/mint?amount={amount}\u0026pub_key={pub_key}\") assert txns.status_code == 200, txns.text for txn_hash in txns.json(): self.rest_client.wait_for_transaction(txn_hash) ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:11:3","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"第4步：执行应用程序并验证执行结果 if __name__ == \"__main__\": rest_client = RestClient(TESTNET_URL) faucet_client = FaucetClient(FAUCET_URL, rest_client) # Create two accounts, Alice and Bob, and fund Alice but not Bob alice = Account() bob = Account() print(\"\\n=== Addresses ===\") print(f\"Alice: {alice.address()}\") print(f\"Bob: {bob.address()}\") faucet_client.fund_account(alice.pub_key(), 1_000_000) faucet_client.fund_account(bob.pub_key(), 0) print(\"\\n=== Initial Balances ===\") print(f\"Alice: {rest_client.account_balance(alice.address())}\") print(f\"Bob: {rest_client.account_balance(bob.address())}\") # Have Alice give Bob 10 coins tx_hash = rest_client.transfer(alice, bob.address(), 1_000) rest_client.wait_for_transaction(tx_hash) print(\"\\n=== Final Balances ===\") print(f\"Alice: {rest_client.account_balance(alice.address())}\") print(f\"Bob: {rest_client.account_balance(bob.address())}\") 输出结果： === Addresses === Alice: e26d69b8d3ff12874358da6a4082a2ac Bob: c8585f009c8a90f22c6b603f28b9ed8c === Initial Balances === Alice: 1000000000 Bob: 0 === Final Balances === Alice: 999998957 Bob: 1000 输出结果解释： 首先，生成了两个帐号（注意此时帐号在区块链上不存在） 利用水龙头：给帐号申请测试币（同时创建帐号） Alice给Bob转账1000个测试币，gas费为43个测试币 可以查询链上数据验证上述操作： https://fullnode.devnet.aptoslabs.com/accounts/e26d69b8d3ff12874358da6a4082a2ac/resources https://aptos-explorer.netlify.app/account/c8585f009c8a90f22c6b603f28b9ed8c ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:11:4","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"第一个Move模块 内容包括： Move模块的编写、编译、测试 将Move模块发布到链上 初始化Move模块，与链上Move模块交互。 官方提供了Python、Rust和Typescript三种语言版本，我们选择Python语言。 复用了一部分“发起第一笔转账交易”中的代码（first_transaction.py）。 源码链接（hello_blockchain.py）：https://github.com/aptos-labs/aptos-core/tree/main/developer-docs-site/static/examples/python ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:12:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"第1步：编写和测试Move模块 1.1 准备aptos源码和开发环境 git clone https://github.com/aptos-labs/aptos-core.git cd aptos-core ./scripts/dev_setup.sh source ~/.cargo/env aptos-core源码目录下的move-examples子目录，能够使我们不需要下载额外的资源而方便的build和测试Move模块。 关于Move语言入门：https://github.com/diem/move/tree/main/language/documentation/tutorial 1.2 Move模块代码 进入\u003captos_core\u003e/aptos-move/move-examples目录: root@VM-0-8-ubuntu:~# cd /data/aptos-core/aptos-move/move-examples/ root@VM-0-8-ubuntu:/data/aptos-core/aptos-move/move-examples# ls build Cargo.toml Move.toml sources src tests root@VM-0-8-ubuntu:/data/aptos-core/aptos-move/move-examples# ls sources/ HelloBlockchain.move HelloBlockchainTest.move root@VM-0-8-ubuntu:/data/aptos-core/aptos-move/move-examples# 查看 Move 代码sources/HelloBlockchain.move： 这是一个Move模块，能够在用户下创建一个String类型的资源，用户仅能设置自己的资源，不能设置其他用户的资源。 struct MessageHolder：资源 set_message:是一个脚本函数，允许通过提交交易的方式来调用此脚本函数： 被调用时，判断当前用户是否存在资源MessageHolder， 如果不存在则创建和MessageHolder资源并将传入的message保存到此资源。 如果判断当前用户资源MessageHolder已存在则重新写入新传入的内容。 Move模块的完整代码： module HelloBlockchain::Message { use Std::ASCII; use Std::Errors; use Std::Event; use Std::Signer; struct MessageHolder has key { message: ASCII::String, message_change_events: Event::EventHandle\u003cMessageChangeEvent\u003e, } struct MessageChangeEvent has drop, store { from_message: ASCII::String, to_message: ASCII::String, } /// There is no message present const ENO_MESSAGE: u64 = 0; public fun get_message(addr: address): ASCII::String acquires MessageHolder { assert!(exists\u003cMessageHolder\u003e(addr), Errors::not_published(ENO_MESSAGE)); *\u0026borrow_global\u003cMessageHolder\u003e(addr).message } public(script) fun set_message(account: signer, message_bytes: vector\u003cu8\u003e) acquires MessageHolder { let message = ASCII::string(message_bytes); let account_addr = Signer::address_of(\u0026account); if (!exists\u003cMessageHolder\u003e(account_addr)) { move_to(\u0026account, MessageHolder { message, message_change_events: Event::new_event_handle\u003cMessageChangeEvent\u003e(\u0026account), }) } else { let old_message_holder = borrow_global_mut\u003cMessageHolder\u003e(account_addr); let from_message = *\u0026old_message_holder.message; Event::emit_event(\u0026mut old_message_holder.message_change_events, MessageChangeEvent { from_message, to_message: copy message, }); old_message_holder.message = message; } } #[test(account = @0x1)] public(script) fun sender_can_set_message(account: signer) acquires MessageHolder { let addr = Signer::address_of(\u0026account); set_message(account, b\"Hello, Blockchain\"); assert!( get_message(addr) == ASCII::string(b\"Hello, Blockchain\"), ENO_MESSAGE ); } } 1.3 测试Move模块 get_message：获取当前的message内容 sender_can_set_message: 测试设置message内容是否成功。 测试Move模块的命令： root@VM-0-8-ubuntu:~# cd /data/aptos-core/aptos-move/move-examples/ root@VM-0-8-ubuntu:/data/aptos-core/aptos-move/move-examples# cargo test --package move-examples Finished test [unoptimized + debuginfo] target(s) in 0.54s Running unittests (/data/aptos-core/target/debug/deps/move_examples-95eb31b6cc56b72f) running 0 tests test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s Running tests/move_unit_tests.rs (/data/aptos-core/target/debug/deps/move_unit_tests-30c935ba45b64f86) running 1 test Running Move unit tests [ PASS ] 0xe110::MessageTests::sender_can_set_message [ PASS ] 0xe110::Message::sender_can_set_message Test result: OK. Total tests: 2; passed: 2; failed: 0 sources/HelloBlockchainTest.move里有另一种测试方法。 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:12:1","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"第2步：Move模块的发布与交互 将Move模块发布（或部署）到链上，并与之交互。 2.1 将Move模块发布到链上 将Move模块发布到链上和提交一笔交易到链上的区别：设置的payload类型不同 class HelloBlockchainClient(RestClient): def publish_module(self, account_from: Account, module_hex: str) -\u003e str: \"\"\"Publish a new module to the blockchain within the specified account\"\"\" payload = { \"type\": \"module_bundle_payload\", \"modules\": [ {\"bytecode\": f\"0x{module_hex}\"}, ], } txn_request = self.generate_transaction(account_from.address(), payload) signed_txn = self.sign_transaction(account_from, txn_request) res = self.submit_transaction(signed_txn) return str(res[\"hash\"]) 2.2 读取用户的MessageHolder资源 Move模块将被发布到一个地址上，这个地址即contract_address。 contract_address：和发布此合约的用户地址相同。 之前的TestCoin的合约地址为0x1。 def get_message(self, contract_address: str, account_address: str) -\u003e Optional[str]: \"\"\" Retrieve the resource Message::MessageHolder::message \"\"\" resources = self.account_resources(account_address) for resource in resources: if resource[\"type\"] == f\"0x{contract_address}::Message::MessageHolder\": return resource[\"data\"][\"message\"] return None 2.3 修改资源 通过交易的方式调用链上的Move模块。 为了实现初始化和操纵资源，Move模块必须暴露脚本函数（script functions），脚本可以被提交的一笔交易调用。 虽然 REST 接口可以显示字符串，但由于 JSON 和 Move 的限制，它无法确定参数是字符串还是十六进制编码的字符串。因此，交易参数始终假定后者。因此，在此示例中，消息被编码为十六进制字符串。 def set_message(self, contract_address: str, account_from: Account, message: str) -\u003e str: \"\"\" Potentially initialize and set the resource Message::MessageHolder::message \"\"\" payload = { \"type\": \"script_function_payload\", \"function\": f\"0x{contract_address}::Message::set_message\", \"type_arguments\": [], \"arguments\": [ message.encode(\"utf-8\").hex(), ] } txn_request = self.generate_transaction(account_from.address(), payload) signed_txn = self.sign_transaction(account_from, txn_request) res = self.submit_transaction(signed_txn) return str(res[\"hash\"]) ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:12:2","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"第3步：Move模块的初始化和交互 https://github.com/aptos-labs/aptos-core/tree/main/developer-docs-site/static/examples/python \u003captos_core_dir\u003e/developer-docs-site/static/examples/python/ pip3 install -r requirements.txt. python3 hello_blockchain.py Message.mv === Addresses === Alice: a52671f10dc3479b09d0a11ce47694c0 Bob: ec6ec14e4abe10aaa6ad53b0b63a1806 === Initial Balances === Alice: 10000000 Bob: 10000000 Update the module with Alice's address, build, copy to the provided path, and press enter. (提示：将编译后的Move文件复制到当前python代码目录下，之后再按下回车。编译方法见下) === Testing Alice === Publishing... Initial value: None Setting the message to \"Hello, Blockchain\" New value: Hello, Blockchain === Testing Bob === Initial value: None Setting the message to \"Hello, Blockchain\" New value: Hello, Blockchain 编译Move代码： 将上面输出的alice地址复制到Move.towl中（\u003captos-core-dir\u003e/aptos-move/move-examples/Move.towl），替换0xe110 cd \u003captos-core-dir\u003e/aptos-move/move-examples/ cargo run -- srouces cp build/Examples/bytecode_modules/Message.mv \u003cpython_source_dir\u003e 链上验证Alice和Bob的资源： Alice通过REST interface：https://fullnode.devnet.aptoslabs.com/accounts/a52671f10dc3479b09d0a11ce47694c0/ Bob通过区块链浏览器：https://explorer.devnet.aptos.dev/account/ec6ec14e4abe10aaa6ad53b0b63a1806 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:12:3","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"运行本地测试网 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:13:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"准备aptos开发环境 下载源码并准备aptos开发环境 git clone https://github.com/aptos-labs/aptos-core.git cd aptos-core ./scripts/dev_setup.sh source ~/.cargo/env 如果由于网路原因导致rust相关软件安装失败（例如，卡在了Updating git repository https://github.com/facebookincubator/cargo-guppy），需要设置使用国内源，创建配置文件：/root/.cargo/config,然后重新执行：./scripts/dev_setup.sh [source.crates-io] replace-with = 'tuna' [source.tuna] registry = \"https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git\" ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:13:1","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"启动节点 进入aptos-core源码目录下，启动节点命令：cargo run -p aptos-node -- --test（首次运行时由于需要下载和编译源码，过程比较长）。 启动成功后，会打印config path cargo run -p aptos-node -- --test命令会从创世账本状态运行aptos-node，如果想重用账本状态（ledger state），使用命令：cargo run -p aptos-node -- --test --config \u003cconfig-path\u003e ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:13:2","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"使用Docker https://aptos.dev/tutorials/run-a-local-testnet#using-docker ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:13:3","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"与本地测试验证网络交互 本地测试验证网络启动后，会看到如下的输出信息（Aptos的命令行工具需要使用这些信息）： root@ubuntu-12:/disk2/aptos/aptos-core# cargo run -p aptos-node -- --test Finished dev [unoptimized + debuginfo] target(s) in 0.79s Running `target/debug/aptos-node --test` Entering test mode, this should never be used in production! Completed generating configuration: Log file: \"/tmp/26a5e8cc3f5fee9f929e4b242d72d7cd/validator.log\" Config path: \"/tmp/26a5e8cc3f5fee9f929e4b242d72d7cd/0/node.yaml\" Aptos root key path: \"/tmp/26a5e8cc3f5fee9f929e4b242d72d7cd/mint.key\" Waypoint: 0:1383de3ece0cc2153f7269df8c39c1cfc3e6eaf26f85e949b509795abb4c3523 ChainId: TESTING REST API endpoint: 0.0.0.0:8080 Stream-RPC enabled! FullNode network: /ip4/0.0.0.0/tcp/7180 Aptos is running, press ctrl-c to exit ==Aptos root key path== - The root (also known as a mint or faucet) key controls the account that can mint. Available in the docker compose folder under aptos_root_key. ==Waypoint== - a verifiable checkpoint into the blockchain (available in the docker compose folder under waypoint.txt) ==REST endpoint== - http://127.0.0.1:8080. ==ChainId== - uniquely distinguishes this chain from other chains. ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:13:4","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"运行全节点 操作系统环境：ubuntu 20.04 x86-64 LTS 可以运行FullNodes来验证状态，并同步到Aptos区块链。任何人都可以运行FullNodes。全节点通过相互查询或直接查询验证器来复制区块链的完整状态。 全节点REST访问链接： http://localhost:8080 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:14:0","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"硬件需求 产品级全节点推荐硬件配置： CPU: Intel Xeon Skylake or newer, 4 cores Memory: 8GiB RAM 产品级全节点推荐硬件配置： CPU: 2 cores Memory: 4GiB RAM 两种方式配置Public FullNode: Aptos-core源代码方式 Docker方式 ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:14:1","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"源码方式 准备开发者环境 git clone https://github.com/aptos-labs/aptos-core.git cd aptos-core ./scripts/dev_setup.sh source ~/.cargo/env 如果由于网路原因导致rust相关软件安装失败，需要设置使用国内源，创建配置文件：/root/.cargo/config,然后重新执行：./scripts/dev_setup.sh /root/.cargo/config的内容如下： [source.crates-io] replace-with = 'tuna' [source.tuna] registry = \"https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git\" ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:14:2","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"启动节点 Checkout devnet分支： git checkout origin/devnet 准备配置文件 root@VM-ubuntu:~/aptos-core# cp config/src/config/test_data/public_full_node.yaml . root@VM-ubuntu:~/aptos-core# wget https://devnet.aptoslabs.com/genesis.blob 修改配置文件：public_full_node.yaml: data_dir(设置数据存放目录) waypoint: 将文件https://devnet.aptoslabs.com/waypoint.txt里的内容替换到from_config字段中。 genesis_file_location：创世文件需要从https://devnet.aptoslabs.com/genesis.blob下载 配置文件示例： base: # Update this value to the location you want the node to store its database data_dir: \"./data\" role: \"full_node\" waypoint: # Update this value to that which the blockchain publicly provides. Please regard the directions # below on how to safely manage your genesis_file_location with respect to the waypoint. from_config: \"0:5add8f76a230dbf6c7b619d5318b6e8b8ebd8e1f7a1422c217f4a60880757eb8\" execution: # Update this to the location to where the genesis.blob is stored, prefer fullpaths # Note, this must be paired with a waypoint. If you update your waypoint without a # corresponding genesis, the file location should be an empty path. genesis_file_location: \"/data/aptos-core/genesis.blob\" full_node_networks: - discovery_method: \"onchain\" # The network must have a listen address to specify protocols. This runs it locally to # prevent remote, incoming connections. listen_address: \"/ip4/127.0.0.1/tcp/6180\" network_id: \"public\" # Define the upstream peers to connect to seeds: {} api: enabled: true address: 127.0.0.1:8080 可以根据实际情况进行修改配置文件的内容。 具体配置可以参考aptos-core源码目录下docker/compose/public_full_node/public_full_node.yaml的内容。 运行全节点接入devnet：cargo run -p aptos-node --release -- -f ./public_full_node.yaml --release表示将编译release版本到目录target/release/aptos-node. 如果要编译debug版，以获得更多的调试信息的话，去掉--release，重新运行。 root@VM-0-8-ubuntu:/data/aptos-core# cargo run -p aptos-node --release -- -f ./public_full_node.yaml Finished release [optimized + debuginfo] target(s) in 5.49s Running `target/release/aptos-node -f ./public_full_node.yaml` ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:14:3","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"Docker方式 Docker安装和运行全节点相对简单，前提是熟悉docker的基本概念和常用命令。 安装docker和docker-compose ubuntu 20.04中使用apt 安装的docker-compose版本太低，需要下载官网的最新版 https://github.com/docker/compose/releases 创建目录，例如：public_fullnode，cd进入新创建的目录下。 下载docker_compose配置文件（docker-compose.yaml），aptos-core的public全节点配置文件（public_full_node.yaml）。 https://github.com/aptos-labs/aptos-core/tree/main/docker/compose/public_full_node/docker-compose.yaml https://github.com/aptos-labs/aptos-core/tree/main/docker/compose/public_full_node/public_full_node.yaml 下载genesis文件和waypoint文件 https://devnet.aptoslabs.com/genesis.blob https://devnet.aptoslabs.com/waypoint.txt 使用命令：docker-compose up来运行容器。如果出错：apt install gnupg2 pass ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:14:4","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"理解和验证节点正确性 初始同步 查询节点同步情况 命令：curl 127.0.0.1:9101/metrics 2\u003e /dev/null | grep aptos_state_sync_version | grep type aptos_state_sync_version{type=\"committed\"}: 最新的区块链版本 aptos_state_sync_version{type=\"highest\"}: 已知的最高或最新版本，通常与target相同 aptos_state_sync_version{type=\"synced\"}: 存储中可用的最新区块链版本，它可能没有帐本信息支持 aptos_state_sync_version{type=\"target\"}: 状态同步的当前target账本版本 root@VM-0-8-ubuntu:~# curl 127.0.0.1:9101/metrics 2\u003e /dev/null | grep aptos_state_sync_version | grep type aptos_state_sync_version{type=\"committed\"} 0 aptos_state_sync_version{type=\"highest\"} 661800 aptos_state_sync_version{type=\"synced\"} 23000 aptos_state_sync_version{type=\"target\"} 661315 root@VM-0-8-ubuntu:~# curl 127.0.0.1:9101/metrics 2\u003e /dev/null | grep aptos_state_sync_version | grep type aptos_state_sync_version{type=\"committed\"} 0 aptos_state_sync_version{type=\"highest\"} 663613 aptos_state_sync_version{type=\"synced\"} 55000 aptos_state_sync_version{type=\"target\"} 661315 root@VM-0-8-ubuntu:~# curl 127.0.0.1:9101/metrics 2\u003e /dev/null | grep aptos_state_sync_version | grep type aptos_state_sync_version{type=\"committed\"} 658039 aptos_state_sync_version{type=\"highest\"} 658039 aptos_state_sync_version{type=\"synced\"} 658039 aptos_state_sync_version{type=\"target\"} 658040 root@VM-0-8-ubuntu:~# curl 127.0.0.1:9101/metrics 2\u003e /dev/null | grep aptos_state_sync_version | grep type aptos_state_sync_version{type=\"committed\"} 659186 aptos_state_sync_version{type=\"highest\"} 659186 aptos_state_sync_version{type=\"synced\"} 659186 aptos_state_sync_version{type=\"target\"} 659187 更详细的日志信息可以在控制台终端查看。 查看连接数 curl 127.0.0.1:9101/metrics 2\u003e /dev/null | grep aptos_connections root@VM-0-8-ubuntu:/data# curl 127.0.0.1:9101/metrics 2\u003e /dev/null | grep aptos_connections # HELP aptos_connections Number of current connections and their direction # TYPE aptos_connections gauge aptos_connections{direction=\"inbound\",network_id=\"Public\",peer_id=\"63fd325d\",role_type=\"full_node\"} 0 aptos_connections{direction=\"outbound\",network_id=\"Public\",peer_id=\"63fd325d\",role_type=\"full_node\"} 1 连接数应该大于0（outbound），==否则==需要添加上游种子节点。 查看账本数据库大小 root@VM-0-8-ubuntu:/data/aptos-core# cat public_full_node.yaml base: # Update this value to the location you want the node to store its database data_dir: \"./data\" role: \"full_node\" waypoint: # Update this value to that which the blockchain publicly provides. Please regard the directions # below on how to safely manage your genesis_file_location with respect to the waypoint. from_config: \"0:5add8f76a230dbf6c7b619d5318b6e8b8ebd8e1f7a1422c217f4a60880757eb8\" execution: # Update this to the location to where the genesis.blob is stored, prefer fullpaths # Note, this must be paired with a waypoint. If you update your waypoint without a # corresponding genesis, the file location should be an empty path. genesis_file_location: \"/data/aptos-core/genesis.blob\" full_node_networks: - discovery_method: \"onchain\" # The network must have a listen address to specify protocols. This runs it locally to # prevent remote, incoming connections. listen_address: \"/ip4/127.0.0.1/tcp/6180\" network_id: \"public\" # Define the upstream peers to connect to seeds: {} api: enabled: true #address: 127.0.0.1:8080 address: 0.0.0.0:8888 root@VM-0-8-ubuntu:/data/aptos-core# du -sh ./data 2.4G ./data 添加上游种子节点 官方开发者网络的 validator fullnode最多只接受1000个连接，如果网络流量过大，我们的Fullnode可能无法与其建立连接，出现“NoAvailablePeers”的错误信息。 如果出现这种情况的话，需要在Fullnode配置文件中添加新的upstream peers。官方也提供了如下一些额外的Fullnode地址（也可以使用社区成员已经运行的全节点）： seeds: 4d6a710365a2d95ac6ffbd9b9198a86a: addresses: - \"/dns4/pfn0.node.devnet.aptoslabs.com/tcp/6182/ln-noise-ik/bb14af025d226288a3488b4433cf5cb54d6a710365a2d95ac6ffbd9b9198a86a/ln-handshake/0\" role: \"Upstream\" 52173b436ae1809df4a5fcfc67f8fc61: addresses: - \"/dns4/pfn1.node.devnet.aptoslabs.com/tcp/6182/ln-noise-ik/7fe8523388084607cdf78ff40e3e717652173b436ae1809df4a5fcfc67f8fc61/ln-handshake/0\" role: \"Upstream\" 476222516fdc55869d2b649c614d965b: addresses: - \"/dns4/pfn2.node.devnet.aptoslabs.com/tcp/6182/ln-noise-ik/f6b135a59591677af","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:14:5","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"高级指南 这部分介绍关于节点配置的高级部分内容，对节点配置进行更多的配置： 为新部署的Fullnode创建静态网络ID(identity) 检索其他节点的公共网络ID Start a node with or without a static network identity 为全节点创建静态ID Fullnodes启动时自动创建随机的网络ID（一对PeerId 和 Public Key ），这对于常规的fullnode非常有用，但是如果需要做一些权限设置（if you need another node to allowlist you or provide specific permissions），或者如果希望自己的全节点始终以相同的网络ID来运行Fullnode，那么就需要为节点创建静态网络ID。 使用源码编译aptos-operational-tool生成private_key $ git clone https://github.com/aptos-labs/aptos-core.git $ cd aptos-core $ ./scripts/dev_setup.sh $ source ~/.cargo/env $ cargo run -p aptos-operational-tool -- \u003ccommand\u003e \u003cargs\u003e root@VM-0-8-ubuntu:/data/aptos-core# cargo run -p aptos-operational-tool -- generate-key --encoding hex --key-type x25519 --key-file ./private-key.txt Compiling aptos-rest-client v0.0.0 (/data/aptos-core/crates/aptos-rest-client) Compiling aptos-operational-tool v0.1.0 (/data/aptos-core/config/management/operational) Finished dev [unoptimized + debuginfo] target(s) in 41.47s Running `target/debug/aptos-operational-tool generate-key --encoding hex --key-type x25519 --key-file ./private-key.txt` { \"Result\": \"Success\" } root@VM-0-8-ubuntu:/data/aptos-core# cat private-key.txt C0F2E4FB6530E0A0805B8E6EFBD074F8E1B6B9DE7437FF3A371D6F962187F163 上面运行密钥生成器，输出十六进制编码的静态x25519 PrivateKey。 使用docker运行aptos-operational-tool生成private_key的方法 $ docker run -i aptoslab/tools:devnet sh -x # 首次运行要连网下载docker镜像 $ aptos-operational-tool \u003ccommand\u003e \u003carg\u003e 官方提供了一个包含aptos-operational-tool工具的docker容器。 获得公共网络ID root@VM-0-8-ubuntu:/data/aptos-core# cargo run -p aptos-operational-tool -- extract-peer-from-file --encoding hex --key-file ./private-key.txt --output-file ./peer-info.yaml Finished dev [unoptimized + debuginfo] target(s) in 0.45s Running `target/debug/aptos-operational-tool extract-peer-from-file --encoding hex --key-file ./private-key.txt --output-file ./peer-info.yaml` { \"Result\": { \"587605be1a76748e906d81315fb28c0a\": { \"addresses\": [], \"keys\": [ \"525a38168de6bc2d21a5960b43a91d5b587605be1a76748e906d81315fb28c0a\" ], \"role\": \"Downstream\" } } } root@VM-0-8-ubuntu:/data/aptos-core# cat peer-info.yaml --- 587605be1a76748e906d81315fb28c0a: addresses: [] keys: - 525a38168de6bc2d21a5960b43a91d5b587605be1a76748e906d81315fb28c0a role: Downstream 如上输出所示： \"587605be1a76748e906d81315fb28c0a\"：peer id ca3579457555c80fc7bb39964eb298c414fd60f81a2f8eedb0244ec07a26e575：基于上面的private key生成的publick key 生成的peer-info.yaml文件（含有当前节点的public identity）的用途：如果你想连接到特定的上游全节点，但是这个上游全节点只允许已知的网络ID节点才能连接。上游节点要把我们自己节点的Public ID加入进许可列表中，同时，我们的节点要用生成的静态网络ID来启动 用静态网络ID启动节点 将下面的配置内容加入到public_full_node.yaml文件中： full_node_networks: - network_id: \"public\" discovery_method: \"onchain\" identity: type: \"from_config\" key: \"\u003cPRIVATE_KEY\u003e\" peer_id: \"\u003cPEER_ID\u003e\" 具体的示例： full_node_networks: - network_id: \"public\" discovery_method: \"onchain\" identity: type: \"from_config\" key: \"C0F2E4FB6530E0A0805B8E6EFBD074F8E1B6B9DE7437FF3A371D6F962187F163\" peer_id: \"587605be1a76748e906d81315fb28c0a\" 让其他全节点连接到自己的节点 一旦设置了以静态网络ID启动节点，那么就可以允许其他节点连接到我们的节点，进而连入如devnet。（节点默认使用随机的动态网络ID，每次启动节点都会变化） 将自己的节点信息告知其他节点，格式如下： \u003cPeer_ID\u003e: addresses: # with DNS - \"/dns4/\u003cDNS_Name\u003e/tcp/\u003cPort_Number\u003e/ln-noise-ik/\u003cPublic_Key\u003e/ln-handshake/0\" role: Upstream \u003cPeer_ID\u003e: addresses: # with IP - \"/ip4/\u003cIP_Address\u003e/tcp/\u003cPort_Number\u003e/ln-noise-ik/\u003cPublic_Key\u003e/ln-handshake/0\" role: Upstream 具体示例： 4d6a710365a2d95ac6ffbd9b9198a86a: addresses: - \"/dns4/pfn0.node.devnet.aptoslabs.com/tcp/6182/ln-noise-ik/bb14af025d226288a3488b4433cf5cb54d6a710365a2d95ac6ffbd9b9198a86a/ln-handshake/0\" role: \"Upstream\" 4d6a710365a2d95ac6ffbd9b9198a86a: addresses: - \"/ip4/100.20.221.187/tcp/6182/ln-noise-ik/bb14af025d226288a3488b4433cf5cb54d6a710365a2d95ac6ffbd9b9198a86a/ln-handshake/0\" role: \"Upstream\" ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:14:6","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"使用最新devnet版本更新全节点 当官方发布了最新的devnet版本时，需要手动更新我们自己的全节点配置，使其与官方的devnet同步。 步骤如下： 停止全节点 删除区块链数据目录（在配置文件public_full_node.yaml中指定） 删除 genesis.blob和waypoint.txt两个文件。 重新下载genesis.blob 和 waypoint.txt https://devnet.aptoslabs.com/genesis.blob https://devnet.aptoslabs.com/waypoint.txt 更新public_full_node.yaml文件 重启节点 检查同步状态，对比status dashboard(每分钟同步一次状态): https://status.devnet.aptos.dev/ ","date":"2022-08-05","objectID":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/:14:7","tags":["区块链","blockchain","aptos"],"title":"区块链Aptos入门教程","uri":"/posts/aptos/0001-aptos%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"雪崩网络Avax概述","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"概述 Avalanche是一个开源平台，用于在一个可互操作、高度可扩展的生态系统中启动去中心化应用程序和企业区块链。Avalanche 是第一个为全球金融规模构建的去中心化智能合约平台，具有近乎即时的交易确定性。以太坊开发人员可以在 Avalanche 上快速构建，因为 Solidity 开箱即用。 Avalanche 与其他去中心化网络之间的一个关键区别是共识协议。过去，人们错误地认为区块链必须缓慢且不可扩展。Avalanche 协议采用一种新颖的共识方法来实现其强大的安全保证、快速的确定性和高吞吐量，而不会影响去中心化。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/:1:0","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"AVAX AVAX 是 Avalanche 的原生代币。它是一种总量固定的稀缺资产，用于支付交易费用、通过质押保护平台安全，并在 Avalanche 上创建的多个子网之间提供基本的记账单位。 1 nAVAX = 0.000000001 AVAX。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/:2:0","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"雪崩共识协议 Avalanche 系列中的协议通过重复的二次抽样投票来运行。当验证者确定交易应该被接受还是拒绝时，它会询问一小部分随机的验证者认为该交易应该被接受或拒绝。如果被查询的验证者认为交易无效，已经拒绝了交易，或者更喜欢有冲突的交易，它会回复认为交易应该被拒绝。否则，它会回复认为交易应该被接受。 如果有大部分a验证者抽样回复他们认为次交易应该被接受，那么验证者更倾向接受交易。后面查询该交易时，它也会回复它认为该交易应该被接受。类似地，如果足够多的验证者回答他们认为应该拒绝交易，验证者会更倾向于拒绝交易。 验证者重复这个采样过程，直到连续b轮，被查询的验证者中的大多数a以相同的结果（接受或​​拒绝）回复。 在交易没有冲突的常见情况下，最终确定会很快达成。当存在冲突时，诚实的验证者会迅速聚集在有冲突的交易周围，进入一个积极的反馈循环，直到所有正确的验证者都喜欢该交易。这会形成接受非冲突事务和拒绝冲突事务的结果。 雪崩共识的工作过程，它可以保证（基于系统参数的概率很高）如果任何诚实的验证者接受或拒绝交易，所有诚实的验证者都会接受或拒绝该交易。 通过阅读白皮书了解更多 Avalanche 共识协议的技术组件。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/:3:0","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"Snowman共识 Snowman 是一种链优化的共识协议——高吞吐量、完全有序，非常适合智能合约。Snowman 由Avalanche 共识协议提供支持。P-Chain和C-Chain都实现了雪人共识协议。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/:4:0","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"主要特性 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/:5:0","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"速度 使用由康奈尔计算机科学家团队开发的新型共识协议，能够在 1 秒内永久确认交易。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/:5:1","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"可扩展性 每秒可处理 4,500 笔交易——比现有区块链高出一个数量级。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/:5:2","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"安全 确保更强大的安全保障，远高于其他网络的 51% 标准。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/:5:3","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"灵活 轻松创建包含几乎任何任意逻辑的自定义区块链和去中心化应用程序。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/:5:4","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"环保 使用节能的权益证明共识算法而不是工作量证明。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/:5:5","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"智能合约 支持创建 Solidity 智能合约和您最喜欢的以太坊工具，如 Remix、Metamask、Truffle 等。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/:5:6","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"私有和公有链 创建您自己的公共或私有区块链。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/:5:7","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"为金融而生 原生支持使用复杂的自定义规则集轻松创建和交易数字智能资产。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/:5:8","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0-copy/"},{"categories":null,"content":"雪崩网络Avax概述","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":null,"content":"概述 Avalanche是一个开源平台，用于在一个可互操作、高度可扩展的生态系统中启动去中心化应用程序和企业区块链。Avalanche 是第一个为全球金融规模构建的去中心化智能合约平台，具有近乎即时的交易确定性。以太坊开发人员可以在 Avalanche 上快速构建，因为 Solidity 开箱即用。 Avalanche 与其他去中心化网络之间的一个关键区别是共识协议。过去，人们错误地认为区块链必须缓慢且不可扩展。Avalanche 协议采用一种新颖的共识方法来实现其强大的安全保证、快速的确定性和高吞吐量，而不会影响去中心化。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/:1:0","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":null,"content":"AVAX AVAX 是 Avalanche 的原生代币。它是一种总量固定的稀缺资产，用于支付交易费用、通过质押保护平台安全，并在 Avalanche 上创建的多个子网之间提供基本的记账单位。 1 nAVAX = 0.000000001 AVAX。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/:2:0","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":null,"content":"雪崩共识协议 Avalanche 系列中的协议通过重复的二次抽样投票来运行。当验证者确定交易应该被接受还是拒绝时，它会询问一小部分随机的验证者认为该交易应该被接受或拒绝。如果被查询的验证者认为交易无效，已经拒绝了交易，或者更喜欢有冲突的交易，它会回复认为交易应该被拒绝。否则，它会回复认为交易应该被接受。 如果有大部分a验证者抽样回复他们认为次交易应该被接受，那么验证者更倾向接受交易。后面查询该交易时，它也会回复它认为该交易应该被接受。类似地，如果足够多的验证者回答他们认为应该拒绝交易，验证者会更倾向于拒绝交易。 验证者重复这个采样过程，直到连续b轮，被查询的验证者中的大多数a以相同的结果（接受或​​拒绝）回复。 在交易没有冲突的常见情况下，最终确定会很快达成。当存在冲突时，诚实的验证者会迅速聚集在有冲突的交易周围，进入一个积极的反馈循环，直到所有正确的验证者都喜欢该交易。这会形成接受非冲突事务和拒绝冲突事务的结果。 雪崩共识的工作过程，它可以保证（基于系统参数的概率很高）如果任何诚实的验证者接受或拒绝交易，所有诚实的验证者都会接受或拒绝该交易。 通过阅读白皮书了解更多 Avalanche 共识协议的技术组件。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/:3:0","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":null,"content":"Snowman共识 Snowman 是一种链优化的共识协议——高吞吐量、完全有序，非常适合智能合约。Snowman 由Avalanche 共识协议提供支持。P-Chain和C-Chain都实现了雪人共识协议。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/:4:0","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":null,"content":"主要特性 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/:5:0","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":null,"content":"速度 使用由康奈尔计算机科学家团队开发的新型共识协议，能够在 1 秒内永久确认交易。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/:5:1","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":null,"content":"可扩展性 每秒可处理 4,500 笔交易——比现有区块链高出一个数量级。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/:5:2","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":null,"content":"安全 确保更强大的安全保障，远高于其他网络的 51% 标准。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/:5:3","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":null,"content":"灵活 轻松创建包含几乎任何任意逻辑的自定义区块链和去中心化应用程序。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/:5:4","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":null,"content":"环保 使用节能的权益证明共识算法而不是工作量证明。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/:5:5","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":null,"content":"智能合约 支持创建 Solidity 智能合约和您最喜欢的以太坊工具，如 Remix、Metamask、Truffle 等。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/:5:6","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":null,"content":"私有和公有链 创建您自己的公共或私有区块链。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/:5:7","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":null,"content":"为金融而生 原生支持使用复杂的自定义规则集轻松创建和交易数字智能资产。 ","date":"2022-08-05","objectID":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/:5:8","tags":["avax","Avalanche","雪崩网络","雪崩协议"],"title":"雪崩网络Avax概述","uri":"/posts/avax/0001-avax%E6%A6%82%E8%BF%B0/"},{"categories":["以太坊","ethereum"],"content":"以太坊源码分析-状态树","date":"2022-07-31","objectID":"/posts/ethereum/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E7%8A%B6%E6%80%81%E6%A0%91/","tags":["以太坊","ethereum"],"title":"以太坊源码分析-状态树","uri":"/posts/ethereum/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E7%8A%B6%E6%80%81%E6%A0%91/"},{"categories":["以太坊","ethereum"],"content":"MPT树 对状态树根的hash，会遍历根下面的每个节点进行hash ","date":"2022-07-31","objectID":"/posts/ethereum/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E7%8A%B6%E6%80%81%E6%A0%91/:0:0","tags":["以太坊","ethereum"],"title":"以太坊源码分析-状态树","uri":"/posts/ethereum/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E7%8A%B6%E6%80%81%E6%A0%91/"},{"categories":["去中心化金融","DEFI"],"content":"什么是流动资金池？它们是如何工作的？为什么我们在去中心化金融中甚至需要它们？此外，跨不同协议（如 Uniswap、Balancer 或 Curve）的流动性池之间有什么区别？我们将在本文中介绍所有这些。","date":"2021-07-15","objectID":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/","tags":["去中心化金融","DEFI"],"title":"什么是流动性资金池，它入如何运作的？","uri":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/"},{"categories":["去中心化金融","DEFI"],"content":"流动性资金池 流动性池（LIQUIDITY POOL）指的是一池被锁在智能合约内的代币。它们借由提供流动性来促进交易。这些流动性池会被去中心化交易平台（DEX）所运用。最早采用流动性池的是 Bancor，但真正让它流行起来的是 Uniswap。 在我们解释流动性池是如何在其中运作，以及 AMM（自动化做市商）是什么之前，先让我们了解为什么需要它？ ","date":"2021-07-15","objectID":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/:1:0","tags":["去中心化金融","DEFI"],"title":"什么是流动性资金池，它入如何运作的？","uri":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/"},{"categories":["去中心化金融","DEFI"],"content":"为什么 DeFi 需要流动性池？ 如果你熟知像是 Coinbase 或是 Binance 这样的交易平台，你会知道，那里的交易是基于订单簿模型（order book model）。这跟传统股票市场一样，像是纽交所（NYSE）还有纳斯达克（Nasdaq）。 在这些订单簿模型市场中，买家和卖家会各自制定他们的订单。买家（又称 BIDDERS，投标人）期望用最低价买到想要的资产，而卖家则是期望用最高价卖出同一项资产。 因此，交易要成立，买卖双方必须要在价格上达到共识。交易可能在两种情况发生，一是买家提高投标价，二是卖家降价出售。 但若是没有人愿意重新出价怎么办？又或者你想买的币数量不够怎么办？ 这时候，必须依靠做市商（market maker）的参与了。简单来说，做市商是一个促进交易的实体，它会一直接受买单与卖单，借此提供流动性（Liquidity）。因此，用户可以不需要等待对手方出现才能交易。 ","date":"2021-07-15","objectID":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/:2:0","tags":["去中心化金融","DEFI"],"title":"什么是流动性资金池，它入如何运作的？","uri":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/"},{"categories":["去中心化金融","DEFI"],"content":"为什么去中心化金融(DeFi)不能仿造这种机制呢？ 其实是可以的。只是它会变得又慢、又贵，而且还很难用。主要原因是，订单簿模型相当依赖做市商，要有很多个做市商，针对某项资产一直不断地做市。若是没有做市商，交易所会立刻变得不具流动性。对于一般用户来说，就会变得很难用。 除此之外，做市商需要一直追踪现时价格，并持续改变他们的出价，然后会有庞大数量的订单发向交易所。 以太坊每秒可以处理 12~15 笔交易，出块时间在 10~19 秒间，这对于订单簿交易所来说，并不是一个可行的选项。每笔与智能合约互动的交易，都会需要 Gas Fee（可视为手续费）。做市商光是提出订单，就可能让他们破产。 ","date":"2021-07-15","objectID":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/:2:1","tags":["去中心化金融","DEFI"],"title":"什么是流动性资金池，它入如何运作的？","uri":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/"},{"categories":["去中心化金融","DEFI"],"content":"那第二层协议可以解决这个问题吗？ 有些第二层协议，像是 Loopring（路印协议）看起来蛮可靠的，但就算是他们，仍然依赖着做市商，而同样会面临流动性问题。不仅如此，如果有用户想要做一笔交易，在第二层协议出入金，还必须多经过两道手续。 这也是为什么要发明新东西，让它在去中心化的世界更加流畅运作的理由。而这就是为什么需要流动性池的原因了。 ","date":"2021-07-15","objectID":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/:2:2","tags":["去中心化金融","DEFI"],"title":"什么是流动性资金池，它入如何运作的？","uri":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/"},{"categories":["去中心化金融","DEFI"],"content":"流动性池是怎么运作的呢？ 一般来说，一个流动性池会有两种代币，这两种代币形成一个新的交易对市场。DAI / ETH 可以作为一个很好的流动性池范例，它在 Uniswap 上相当受欢迎。 当一个新的流动性池被创建时，第一个流动性提供者（Liquidity Provider，LP）会设定在池中的初始价格，LP 会被驱使着让池中的两种资产维持等价值。如果池中的初始价格，与全球市场价格脱节，那就会立即产生一个套利空间，让 LP 损失资金。对于后续加入资金池的 LP 来说，同样会面临这样的风险。 当流动性池获得流动性时（可理解为注入资金），LP 会获得一个特殊的 LP 代币，代表着他们提供了多少比例的流动性。 当交易是由此流动性池所促进时，0.3 % 的交易费用会按照比例分给所有 LP 代币的持有者。如果 LP 想要抽回他们提供的流动性资金，其所代表的 LP 代币就必须被销毁。 每次有 LP 代币被销毁，就会根据确定性算法（Deterministic algorithm）启动价格调整，这样的机制，也就是自动化做市商（Automated Market Maker, AMM）。 而在每一种不同的协议中，他们所用的 AMM 算法都有些不一样。基础流动性池（basic liquidity pool），像是 Uniswap，使用的是恒定乘积做市商算法（constant product market maker algorithm）：ｘ* y = k，让 x 代币数量与 y 代币数量的乘积，永远等于常数 k。 正因为这样的演算法，流动性池可以永远提供流动性，无论交易多大。主要是因为，当某代币的需求增加时，这个算法会一直增加它的价格。 这种流动性池的重点在于，代币的比例支配着价格。 举例而言，在 DAI / ETH 的池子中投入 DAI 买入 ETH，就会造成 ETH 的价格上升，而 DAI 的价格会下降。 **价格移动的幅度，则是依据交易的大小、池子的大小而定。越大的池子，就能承受越大的交易量，对价格的冲击也比较小（也就是所谓的滑价 Slippage）。**总之，越大的池子可以乘载越大的交易，而且产生的滑价比较小。 因为大池子滑价比较小，可以带来更好的交易体验。有些协议，像是 Balancer，开始给予 LP 更多的奖励，以吸引流动性，这样的过程，就叫做「流动性挖矿」（liquidity mining）。流动性池、自动化做市商的概念很简单，但也很有用。如果我们不用中心化的订单簿，那我们就不需要做市商的外部支持。 上述的流动性池机制，被用于 Uniswap，他们是最基础的流动性池。其他流动性池复制了这样的概念，并且加入了一些有趣的想法。 像是 Curve，他们发现 Uniswap 的 AMM 机制，在两种价格相近的资产间，运作的并不顺利。像是稳定币，或是同一种代币的衍生产品（像是 WETH / SETH）。Curve 池子的演算法，在交易这一类型代币时，可以提供更低的手续费，还有滑价也会更低。 还有另外一种流动性池的例子 – Balancer，他们发现我们不需要把池子里的资产限制为两种。 Balancer 容许一个池子内可以至多放入八种资产。 ","date":"2021-07-15","objectID":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/:3:0","tags":["去中心化金融","DEFI"],"title":"什么是流动性资金池，它入如何运作的？","uri":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/"},{"categories":["去中心化金融","DEFI"],"content":"有哪些潜在风险？ 典型的 DeFi 风险就是智能合约的漏洞、管理者密钥，还有系统性风险。还有就是暂时性损失（impermanent loss）跟流动性池骇客。这些内容都会在之后的影片中继续说明，链新闻也会同步追踪。 ","date":"2021-07-15","objectID":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/:4:0","tags":["去中心化金融","DEFI"],"title":"什么是流动性资金池，它入如何运作的？","uri":"/posts/defi/005%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B5%84%E9%87%91%E6%B1%A0%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/"},{"categories":["去中心化金融","DEFI"],"content":"流动性挖矿现在是去中心化金融中最热门的话题之一，您很有可能已经听说过一些流动性矿工正在获得的疯狂回报。那么什么是流动性挖矿？这一切是如何开始的？有哪些流动性挖矿的例子？以及涉及的风险是什么？我们将在本文中介绍所有这些。","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"导语 去中心化金融(DeFi)活动一直处于区块链领域技术创新的最前沿。DeFi应用程序有何独特之处？此类应用程序无需设定使用权限，任何人（或任何产品，如智能合约）只要连接互联网并拥有受支持的钱包即可与之交互。此外，DeFi应用程序通常不需要信任任何托管方或中间商。换言之，它们是去信任化应用程序。那么，这些属性可以实现哪些新用例呢？ 当前涌现出了很多的新兴概念，流动性挖矿正是其中之一。这是一种利用无权限流动性协议，通过所持数字货币赚取奖励的新方式。它允许所有人使用建立于以太坊之上的“金钱乐高”(Money Legos)去中心化生态系统赚取被动收入。因此，流动性挖矿可能改变投资者未来持有数字货币的方式。既然可以让数字货币资产以钱生钱，何必将其闲置不用？ 那么，流动性挖矿的矿工们如何进行挖矿呢？他们又期望获得什么样的产量呢？如果您打算成为一名流动性挖矿矿工，应该从何处着手呢？我们将在本文中对所有这些概念进行解释。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:1:0","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"什么是流动性挖矿？ Yield farming，中文名为“流动性挖矿”是一种通过所持数字货币产生奖励的方法。简而言之，这意味着锁定加密货币并获得奖励。 从某种意义而言，流动性挖矿可以与权益质押相提并论。但是，流动性挖矿的后台非常复杂。在许多情况下，它与称为流动性供应商(LP)的用户搭配工作，这些用户负责将资金注入流动性资金池。 什么是流动性资金池？它基本上属于一种容纳资金的智能合约。流动性供应商(LP)会向资金池注入流动性，并获得奖励作为回报。这种奖励可能来自基础DeFi平台产生的费用或其他来源。 部分流动性资金池以多种代币支付奖励。这些奖励代币后续可以存入其他流动性资金池，从而继续获得奖励，循环往复。相信您已经了解到，即使是极其复杂的策略，也可能会很快崭露头角。其基本理念是流动性供应商将资金注入流动性资金池并从中获得回报。 流动性挖矿通常使用以太坊中的ERC-20代币完成，奖励通常也以某种ERC-20代币的形式发放。然而，未来情况可能会发生变化。为什么这么说呢？因为目前此类活动大多发生在以太坊生态系统中。 但跨链桥以及其他类似的技术革新可能推动DeFi应用程序在未来突破特定区块链的限制。这意味着，它们可以在支持智能合约功能的其他区块链中运行。 流动性矿工通常会在不同协议之间频繁转移资金，以期获得高收益。因此，DeFi平台还会提供其他经济激励措施，吸纳更多的资本进入平台。与中心化交易平台相同，流动性通常还会带来更多的流动性。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:2:0","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"是什么催生了流动性挖矿的繁荣？ 用户突然对流动性挖矿产生浓厚的兴趣，可能是得益于COMP代币（即Compound金融生态系统的治理代币）的推出。治理代币将治理权授予代币持有者。然而，如果希望网络尽可能实现去中心化，应该如何分配这些代币呢？ 通过流动性激励，按照算法来分配治理代币，通常是开启去中心化区块链的常见方法。这种方式可以吸引流动性提供者为协议提供流动性，开展新代币的“挖矿”。 尽管Compound并没有提出流动性挖矿，但COMP的推出使这种模式的代币分配模型大受欢迎。 从那时起，其他DeFi项目也提出了创新计划，以吸引其生态系统的流动性。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:2:1","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"什么是总锁定价值（TVL）？ 有什么好方法可以衡量DeFi流动性挖矿的整体健康度？答案是“总锁定价值(TVL)”。该指标衡量DeFi借贷和其他货币市场类型中锁定的数字货币数量。 从某种意义上来说，总锁定价值(TVL)就是流动性资金池中的流动性总量。这项指标可以有效衡量DeFi和流动性挖矿市场的整体健康状况。它也可以用来有效比较不同DeFi协议所占的“市场份额”。 如需追踪总锁定价值(TVL)，敬请访问Defi Pulse。在此可以查看哪些平台在DeFi中锁定的以太坊或其他数字货币资产数量最多。据此即可大致了解当前流动性挖矿的状态。 当然，锁定的价值越多，进行中的流动性挖矿就越多。需要注意的是，您可以用ETH、USD甚至BTC来衡量TVL。每种方式都会为您提供有关DeFi货币市场状况的不同展望分析。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:3:0","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"流动性挖矿的原理是什么？ 流动性挖矿与自动化做市商（AMM）模型密切相关，通常会涉及流动性提供者(LP)和流动性资金池。让我们来看看其背后的原理。 流动性供应商负责将资金注入流动性资金池。该资金池为市场平台提供资金支持，用户在其中可以借出、借入或交换代币。使用这些平台会产生使用费，流动性供应商可以按所占份额获得报酬。这是自动化做市商(AMM)的运作基础。 但是，在实际使用中可能存在很大差异，更何况这又是一项全新技术。毫无疑问，我们将看到当前基础上会出现更多的改进方式。 除手续费之外，向流动性资金池中注入资金还能获得另外一项奖励，那就是获得新代币。例如，有的代币可能无法在公开市场上少量购买，但却可以通过向特定资金池提供流动性来积少成多。 代币的分发规则将取决于协议的独特实现方式。但总而言之，流动性供应商会根据其向资金池中提供的流动性数量获得相应回报。 尽管并非常规要求，但存入的资金通常是与美元挂钩的稳定币。DeFi中最常用的稳定币包括DAI、USDT、USDC和BUSD等。部分协议会自行铸造代币，用来代表用户在系统中存入的数字货币。例如，如果将DAI存入Compound，可以获得cDAI（即Compound DAI）；如果将以太坊存入Compound，可以获得cETH。 您可以想象，这种方式可能会存在多重的复杂性。您可以将cDAI存入另一个协议，该协议会铸造第三种代币来代表用来代表DAI的cDAI，以此类推。资金的链条可能变得非常复杂且难以追踪。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:4:0","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"如何计算流动性挖矿的收益？ 通常，流动性挖矿的收益是 按年计算的。这样可以估算您一年内可以获得的预期收益。 常用的度量标准是年化利率（APR）和年化收益比率（APY）。它们之间的区别在于，APR不考虑复利的影响，而APY则需要考虑。在这种情况下，复利意味着直接将利润再投资以产生更多的回报。但是，请注意，APR和APY这两个词有可能会相互混用。 还应该注意，这两个值只是估计和预测的指标。即使是短期收益也很难准确估计。为什么呢？因为流动性挖矿是一个竞争激烈且节奏很快的市场，其收益会迅速波动。如果流动性挖矿策略行之有效，许多矿工都会去抓住机会，大量的矿工涌入可能会导致高收益率迅速下降。 由于APR和APY这两个指标都是传统市场的产物，所以DeFi可能需要找到自己用来计算收益的指标。鉴于DeFi发展迅猛，可能有必要计算每周甚至每天的收益。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:5:0","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"DeFi中的抵押物是什么？ 通常情况下，如果选择借贷资产，必须提供抵押品为贷款担保，这实质上是为贷款设置了保险。其中有何关联呢？这取决于接收您所借资金的协议，但您必须密切关注抵押率。 抵押品的价值如果降至协议规定的阈值以下，可能在公开市场中遭到强制平仓。如何才能避免强制平仓？您可以增加更多抵押品。 需要重申的是，每个平台对此都设有特定规则，即设置了平台专属的抵押率。另外，它们通常与所谓的“超额抵押”的概念结合使用。这意味着，借款人必须存入价值高于所借款项的抵押品。这是为什么呢？是为了降低恶性市场崩溃导致系统中大量抵押品被强制平仓的风险。 因此，假设您使用的借贷协议要求抵押率为200％。这意味着您每投入价值100美元的抵押物，您就可以同时借入50美元。但是，为了进一步降低强制平仓的风险，增加比要求数量更多的抵押物通常会更加安全。话虽如此，许多交易系统会使用很高的抵押率（例如750％）来将整个平台的强制平仓风险控制在一个相对安全的状态。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:6:0","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"流动性挖矿的风险 流动性挖矿并不简单。收益最高的流动性挖矿策略非常复杂，只推荐高级用户使用。此外，流动性挖矿通常更适合有大量资本可供支配的个人或组织（即巨鲸）。 流动性挖矿并不像看起来那样容易，并且如果您对自己的交易策略并没有充分了解，就很可能会造成亏损。我们刚刚讨论了抵押品被强制平仓的风险。那么您还需要注意哪些其他的风险呢？ 流动性挖矿一项显而易见的风险是智能合约。DeFi的性质决定了许多协议是由预算有限的小型团队构建和开发的。这会增加智能合约出现漏洞的风险。 即使是由信誉良好的审计公司审计通过的大型协议，也总是出现安全漏洞和问题。由于区块链的不可变性质，可能导致用户损失大笔资金。因此，您在将资金锁定于智能合约时，必须考虑上述风险。 此外，DeFi的最大优势是 可组合的操作思路，但这同时也蕴含着巨大的风险。让我们看看它是如何影响流动性挖矿的。 正如我们之前所讨论的，DeFi协议是无需许可的，可以彼此无缝集成。这意味着整个DeFi生态系统在很大程度上依赖于每个构建区块。当我们说这些应用程序是是 可组合的 ，即是指它们可以轻松地协同工作。 那为什么又说这是一种风险呢？因为一旦其中的一个构建模块无法按预期工作，整个生态系统就可能会遭到破坏。这样会给矿工和流动资金池带来很大的风险。您不仅需要信任您存入资金的协议，而且还要信任该协议可能依赖的所有其他协议。 ➟ 想要开启数字货币之旅？欢迎前往币安购买比特币！ ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:7:0","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"流动性挖矿的平台和协议 您如何才能通过流动性挖矿获取收益呢？现在还没有一种固定的流动性挖矿方式。实际上，流动性挖矿的策略可能会每小时都在发生变化。每个平台和策略都会有自己的规则和风险。如果决定开始流动性挖矿，就必须熟悉去中心化流动性协议的工作原理。 现在，我们已经明白了，其基本思路就是用户将资金存入智能合约并赚取奖励作为回报。然而，具体实施过程中会遇到各种千差万别的情形。因此，盲目地将辛苦赚得的资金存进去，指望这样可以获得高额回报，其实并不明智。风险管理的基本法则是必须时刻掌控自己的投资情况。 那么，最受矿工们欢迎的平台是什么呢？我们在这里整理了一系列平台协议的集合，这些不是全部的清单列表，但这些协议是流动性挖矿策略的核心。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:8:0","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"Compound Finance Compound是一种算法型货币市场，允许用户借出和借入资产。所有以太坊钱包持有者均可向Compound的流动性资金池注入资产，赚取的奖励还会立即开始计算复利。利率将根据供需情况，通过算法进行调整。 Compound是流动性挖矿生态系统的核心协议之一。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:8:1","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"MakerDAO Maker是一个去中心化的信用平台，支持DAI的创建，DAI是一种在算法上与美元价值挂钩的稳定币。任何人都可以打开Maker Vault，在其中锁定ETH、BAT、USDC或WBTC等抵押资产。他们可以生成DAI作为对其锁定抵押品的贷款。该贷款会随着时间的推移产生利息，称为稳定费，该费率由MKR代币持有者确定。 流动性挖矿矿工可以使用Maker产生DAI，用于流动性挖矿策略。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:8:2","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"Synthetix Synthetix是一种合成资产协议。它允许所有人锁定（质押）Synthetix网络代币(SNX)或以太坊，以此作为抵押品并铸造相应的合成资产。合成资产都包括什么？实际上，只要是价格来源可靠的资产均可归入其中。因此，几乎所有金融资产均可添加至Synthetix平台。 Synthetix在未来可能会允许所有资产类别应用于流动性挖矿。您是否希望在流动性挖矿策略中使用长期储值方式？合成资产或许是理想之选。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:8:3","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"Aave Aave是一种去中心化的借出和借入协议。利率将根据当前市场状况，通过算法进行调整。作为出借资金的回报，出借方获得“aTokens”。这些代币在存入后立即开始产生利息并创造复利。Aave还支持其他更为高级的功能，如闪电贷。 作为去中心化的借贷协议，Aave在流动性挖矿矿工中得到广泛应用。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:8:4","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"Uniswap Uniswap是一种去中心化交易平台(DEX)协议，可执行去信任化的代币交换。流动性供应商可通过存入两种等值代币来创建市场。此后，交易者即可与流动性资金池进行交易。作为提供流动性的回报，流动性供应商会从其资金池开展的交易中赚取手续费。 Uniswap的无摩擦属性使其成为最受欢迎的去信任化代币交易平台之一。这种属性对于流动性挖矿策略可能会十分奏效。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:8:5","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"Curve Finance Curve Finance是一种专为高效交换稳定币而设计的去中心化交易协议。与其他类似的协议（如Uniswap）不同，Curve协议允许用户以相对较低的滑动价差交换高价值稳定币。 就像您想象的那样，由于流动性挖矿中稳定币的数量众多，Curve矿池是基础架构的关键组成部分。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:8:6","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"Balancer Balancer是类似于Uniswap和Curve的流动性协议。但是，关键区别在于它支持在流动性资金池中分配自定义代币，允许流动性提供者创建自定义的Balancer资金池，而不是像Uniswap要求的那样50/50分配。就像Uniswap一样，流动性供应商也可以通过自己的流动资金池中发生的交易赚取手续费收益。 由于它为流动资金池的创建带来了灵活性，因此Balancer是流动性挖矿策略的一项重要创新。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:8:7","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"Yearn.finance Yearn.finance是一个去中心化的聚合商业生态系统，用于为Aave，Compound等协议提供贷款服务。它旨在通过算法找到最盈利的借贷服务来优化代币的借贷。资金存入后会立即转换为yToken，然后通过定期再平衡来获得最大化利润。 对于想要自动选择最佳策略交易协议的矿工来说，Yearn.finance非常好用。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:8:8","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"总结 现在，我们已经了解了数字货币领域的最新热潮——流动性挖矿。 这场去中心化金融革命还能带来什么？我们无法预知在这些既有组成部分的基础上，未来会诞生哪些新的应用程序。尽管如此，去信任化流动性协议和其他DeFi产品无疑处于数字货币经济学和计算机科学的最前沿。 毫无疑问，DeFi货币市场有助于构建一个更加开放、访问更加便捷的金融系统，可供任何能够连接互联网的用户使用。 ","date":"2021-07-12","objectID":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/:9:0","tags":["去中心化金融","DEFI","流动性挖矿","Yield Farming"],"title":"什么是流动性挖矿？","uri":"/posts/defi/004%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81%E5%8A%A8%E6%80%A7%E6%8C%96%E7%9F%BFdefi%E8%A7%A3%E9%87%8A/"},{"categories":["去中心化金融","DEFI"],"content":"什么是 DEFI？去中心化金融解释（以太坊、MakerDao、Compound、Uniswap、Kyber）","date":"2021-03-08","objectID":"/posts/defi/002%E4%BB%80%E4%B9%88%E6%98%AF%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D/","tags":["去中心化金融","DEFI"],"title":"什么是去中心化金融(DEFI)？","uri":"/posts/defi/002%E4%BB%80%E4%B9%88%E6%98%AF%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D/"},{"categories":["去中心化金融","DEFI"],"content":"什么是 DeFi？ Defi 应用程序是加密领域的终极杀手级应用程序。无论您之前是否听说过 defi，或者您只想确保自己理解正确，这篇文章都是为您准备的。 DeFi （中心化金融）的目的是建立一个对所有人开放的新金融系统，且不需要像银行这样的中心化机构。为了实现这一点，Defi在很大程度上依赖于密码学、区块链和智能合约。 智能合约是 Defi 的主要组成部分，如果你不知道什么是智能合约或者你想更新你的知识，你可以查看我之前的文章，什么是智能合约。 目前大多数defi 项目都是建立在以太坊上的。主要原因是以太坊相当强大的编程语言 Solidity，它允许编写高级智能合约，包含了所有必要的逻辑来满足 defi 应用程序，此外，以太坊在所有智能合约平台上拥有最丰富的生态系统，拥有数千个开发人员每天都在构建新的应用程序，并将最大的价值锁定在智能合约中，从而产生额外的网络效应。事实上，本文提到的所有 Defi 协议都是建立在以太坊之上的。 现在，让我们看看这一切是如何开始的。 DeFi 简史 MakerDAO 是去中心化金融运动的首批项目之一。 MakerDAO 成立于 2015 年，允许用户锁定 ETH 等抵押品并生成 DAI——一种通过某些激励措施跟随美元价格的稳定币。DAI 还可用于在 Maker 的 Oasis 平台上进行储蓄。这重建了金融体系的支柱之一——借贷。事实上，defi 正试图以一种无需许可和开放的方式创建全新的金融生态系统。借贷只是这个生态系统的一部分。其他一些重要部分是稳定币、去中心化交易所、衍生品、保证金交易和保险。 让我们一一讨论每个类别。 借贷 除了我们刚才提到的 MakerDAO，这个类别中还有一些其他重要的 defi 项目。 主要的是复合。在撰写本文时，Compound 是借贷类别中最大的 defi 项目，协议中锁定了价值约 6.3 亿美元的资产。 Compound 是一种算法、自主的利率协议，允许用户提供 Ether、BAT、0x 或 Tether 等资产并开始产生利息。提供的资产也可以作为借入其他资产的抵押品。 此类别中另一个受欢迎的 defi 项目是 Aave。 算法稳定币 通过巧妙地使用智能合约和某些激励措施，我们可以创建与美元挂钩的稳定币，而无需在现实世界中存储美元。我们已经提到了 MakerDAO，它本质上允许用户锁定他们的抵押品并生成 DAI。DAI 是算法稳定币的一个很好的例子。 除了 DAI，还有其他多种非算法稳定币，如 USDT、USDC 或 PAX。它们的主要问题是它们是中心化的，因为它们背后有一家公司负责持有等值的美元或其他资产稳定币的价值。尽管如此，这些稳定币还是广受欢迎，并广泛用于 Compound 或 Aave 等 defi 应用。 去中心化交易所 与标准的中心化加密交易所相反，去中心化交易所或 dexes 允许以完全去中心化和无需许可的方式交换加密资产，而不会放弃对代币的保管。有两种主要类型的 dexes，基于流动性池和基于订单簿的。 Uniswap、Kyber、Balancer 或 Bancor 等一些基于流动性池的例子。Loopring 和 IDEX 是基于订单簿的示例。 衍生品 与传统金融类似，衍生品是从标的资产的表现中获取价值的合约。 该领域的主要 Defi 应用程序是 Synthetics，它是一个去中心化平台，可提供对不同资产的链上曝光。 保证金交易 保证金交易也与传统金融类似，是使用借入资金增加某种资产头寸的做法。 保证金交易领域的主要 Defi 应用程序是 dYdX 和 Fulcrum。 保险 保险是传统金融的另一部分，可以在去中心化金融中复制。它提供某些赔偿保证，以换取支付保费。Defi 领域中最受欢迎的保险应用之一是防止智能合约失败或保护存款。 该领域最受欢迎的 Defi 项目是 Nexus Mutual 和 Opyn。 神谕 另一个非常重要但并不严格限于金融部分的 Defi 生态系统是预言机服务，它专注于将来自外部世界的可靠数据馈送到智能合约中。该领域最受欢迎的项目是 Chainlink。 这些几乎是 defi 生态系统的所有主要部分。它们也可以以多种不同的方式组合在一起。我们可以将它们视为“金钱乐高积木”，因为可以在现有区块之上构建更复杂的 defi 项目。 DeFi 与 CeFI 让我们比较一下代表集中式或传统金融的 defi 和 cefi 之间的主要区别。 有哪些风险？ 在结束本文之前，我们还必须提到与 defi 相关的潜在风险。 主要风险之一是智能合约中的错误和可能影响现有合约的协议更改。我们在上一篇关于智能合约的文章中更详细地描述了它们。这也是用户可以购买额外保险以降低潜在问题风险的时候。 除此之外，我们总是要检查一个 defi 项目的去中心化程度，以及如果出现问题，关闭程序是什么。有人有可用于关闭协议的管理员密钥吗？或者也许有一些链上治理来做出这样的决定。 最重要的是，我们必须始终考虑可能由于资产价格急剧贬值而导致的系统性风险，这可能导致跨多个 Defi 协议的级联清算。 网络费用和拥塞也可能是一个问题，特别是如果我们想避免清算并且我们试图让我们说按时提供更多的抵押品。即将到来的以太坊 2.0 和第二层扩展解决方案可以帮助解决这个问题。 还有一组更微妙的功能或应用于其中一个协议的更改可能会激励用户执行某些可以跨多个协议级联的非显而易见的操作。类似的一个很好的例子是最近在 Compound 协议中分发 COMP 代币，导致用户进入似乎是无利可图的高息借贷，由于获得额外的 COMP 代币奖励，实际上是有利可图的。即使这样的情况可能非常危险，它们也会使整个生态系统更加强大，并且在未来更不容易受到类似情况的影响。 总结和 DeFi 的未来 您可能已经注意到，defi 是一个超级有趣且充满活力的空间，充满了机会。虽然，我们必须记住，这仍然是一个非常新兴的行业，所以它是一个高风险和高回报的游戏。 Defi 是最接近能够真正颠覆传统金融业的东西。与大多数金融科技公司相反，defi 建立在新的轨道上，而不是依赖于过时的技术和程序。 目前，大多数金融产品只能由银行创造。Defi 是开放的、无需许可的，并且能够以类似于 Internet 的方式进行协作。 尽管 Defi 目前主要构建在以太坊上，但随着互操作性协议的更多采用，未来我们可能会看到更多项目构建在不同的链上。 补充： 这只是对defi的介绍。在接下来的文章中，我们将分别关注 Defi 生态系统的各个部分，敬请期待。 ","date":"2021-03-08","objectID":"/posts/defi/002%E4%BB%80%E4%B9%88%E6%98%AF%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D/:0:0","tags":["去中心化金融","DEFI"],"title":"什么是去中心化金融(DEFI)？","uri":"/posts/defi/002%E4%BB%80%E4%B9%88%E6%98%AF%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D/"},{"categories":["去中心化金融","DEFI"],"content":"你是否听说过“代码即法律”？就是用程序来执行规则。 如果真是这样，我们还需要律师吗？ 我们可以生活在一个完全自动化的世界，代码决定了我们能做什么、不能做什么。 随着当前区块链智能合约的发展，这种场景可能比我们想象的更近。","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"概述 你是否听说过“代码即法律”？就是用程序来执行规则。 如果真是这样，我们还需要律师吗？ 我们可以生活在一个完全自动化的世界，代码决定了我们能做什么、不能做什么。 随着当前区块链智能合约的发展，这种场景可能比我们想象的更近。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:1:0","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"智能合约是什么? 智能合约是一段以确定的方式自动执行的代码， 通常在区块链上存储和执行，使其安全并且无需信任。 智能合约具有接收、存储、发送资金，甚至调用其他智能合约的能力。 它们遵循 if-then 语义，这使得智能合约非常容易编写。 智能合约旨在消除决策中的人为因素。 在传统合同中，人为因素通常被证明是最容易出错和不可靠的因素。 现在我们用自动售货机来类比智能合约，它们有一些相似之处。 典型的自动售货机程序允许某些确定的操作，并且可以根据输入进行状态转换， 它以完全确定的方式运转。 例如，如果你想买一罐 2 美元的可乐，但你只投入1美元，无论你尝试多少次都无法得到饮料。 相反，如果你投入 3 美元，机器会给你一罐可乐和合适的零钱。 即使是找零，也是机器通过编写程序预先定义的。 智能合约可以完全依赖区块链上可用的信息，例如，如果你给我 10 个Token A，我会给你 10 个Token B（假设两个Token在同一条区块链上，Token可以是普通的Token，也可以是N FT，它可以是现实在区块链上的一种映射）。智能合约也可以依赖区块链外的数据源，例如以太坊价格或上证指数价格。 依赖外部数据将使智能合约变得更加困难，因为它们必须信任现实世界的数据。 通过使用预言机服务可以最小化所必须的信任，但即使是预言机服务，其本身也必须是可信的。 有一些项目通过某些激励措施来使预言机更有可能提供正确可信的数据。 Chainlink 在该领域目前属于领跑者，后面我们会专门来讲预言机和Chainlink的原理。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:2:0","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"以太坊和其他链的智能合约 以太坊是一条很典型的区块链，它支持智能合约，并支持程序员实现自己的智能合约，并为此创建Solidity语言来专门编写智能合约程序。在以太坊中，所有部署的智能合约都是不可变的，一旦部署它们就无法修改，这会产生某些风险，我们稍后讨论。 以太坊上的智能合约也是去中心化的，这意味着没有一台机器能控制合约。 事实上，以太坊网络的所有节点都存储相同合约和相同的状态。 虽然以太坊是目前最流行的通用智能合约平台，但它并不是唯一的，它的竞争对手也不少，例如 Cardano、Tezos、EOS、BSC，DFINITY，都具备独有的特性。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:2:1","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"传统合同的问题 智能合约一词是由著名的密码学家尼克·萨博在 1990 年代初期创造的。 这个名字虽然不是很好理解，但它在区块链行业中很常用 为了理解智能合约的好处，我们假设一个场景与传统领域对比。 假设我们要编写以下合约。 如果 Alice 发送 X 个Token A 而 Bob 发送相同数量的代币 B，则代币将被交换，Alice 将收到 Bob 的代币，Bob 将收到 Alice 的代币。 如果Alice和Bob需要交换Token，Alice发送X个TokenA给Bob，则Bob就发送X个TokenB 给 Alice。 在没有智能合约世界中，Alice和Bob不需要互相信任，就可以完成交换的一种方式是，与第三方创建托管合约。 第三方将从 Alice 那里收集Token A，等待 Bob 提供相同数量的Token B，然后向 Alice 和 Bob 各自发送他们的交换代币，Alice和Bob交易完成。 我们可以想象下 Alice 和 Bob 可能面临的一些问题。 信任中介 无法保证第三方在收到 Alice 和 Bob 的资金后不会丢失资产，或者带着资产逃跑。 我们只能依靠中介的声誉或者某些保险。 这种方法不是确定性的，如果出现差错，它可能会由于多种因素而产生不同的结果。相反，智能合约会以完全自动化、确定的方式运作，确保双方在满足条件时都能收到资金。 智能合约本身也可以持有资金，这在传统世界中是不可能实现的。 效率 由于中间人的存在，Alice 和 Bob 可能需要等待几天或几周才能完成Token的交换。 或者他们想在周日进行交换的话， 中介是否还在工作？ 有了智能合约，这些问题都会消失，并且可以在满足起始设置的条件后，几秒钟内就完成。 成本 传统合约不仅因为中介要从中获利成本高昂，而且如果合同出现任何问题，还存在仲裁和执行等巨大的隐性成本风险。 可复用性 其他想要交换Token的人，都可以使用交换 Alice 和 Bob Token的智能合约。 在传统世界中，他们必须单独签署的合约并向中介支付各自的费用。 欺诈 这是中介本身的另一个隐含成本。 在交换之前，中介必须确保 Alice 和 Bob 的代币都是合法的。 欺诈在传统金融中非常普遍，大多数公司都拥有庞大的风控团队，只是单纯的防止公司受到欺诈。 而智能合约，可以通过数字签名在区块链上验证代币，可以很明确的判断 Alice 和 Bob 是否都有资格花费他们各自的代币。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:2:2","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"使用案例 智能合约的用途越来越多，支付、去中心化金融、供应链、众筹、NFT。 智能合约也是去中心化应用程序（Dapp） Da的基本构建块。 我们谈几个智能合约的例子。 去中心化金融（DeFi） 是严重依赖智能合约的新兴行业之一。 在这个空间中已经建造的一些东西包括。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:3:0","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"去中心化稳定币 通过巧妙地使用智能合约加某些激励措施，我们可以创建与美元挂钩的稳定币，而无需在现实世界中存储美元。 MakerDAO 是稳定币的代表公司之一。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:3:1","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"流动性提供商 一些智能合约可以让用户以无需许可，完全去中心化的方式提供流动性和交换代币。 Uniswap 或 Kyber Network 是此类协议代表。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:3:2","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"众筹 在众筹方面，您可以想象一个合约，一旦社区通过验证满足了某些目标，就会自动解锁资金。 远不止于此，也可以想象一些更具未来感的例子。比如可以通过智能合约促进拼车、公寓租赁等等之类的事情。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:3:3","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"慈善 智能合约在慈善上， 你可以想象一个完全自动化的基金，它可以在没有任何中间人的情况下直接向最需要的人汇款。 例如，该基金可以确定某个地区遭受飓风袭击，并将资金重新定向到那个地区。 就目前而言，这听起来很不可能，但是这种事情素需要的一切区块链正在构建和完善。 智能合约的用途几乎是无限的，后面的视频我们会再继续介绍智能合约的方方面面。但在实现这些之前，我们必须解决一些问题。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:3:4","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"风险 智能合约的主要风险之一是困扰所有其他软件的问题——BUG。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:4:0","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"漏洞 智能合约有名的漏洞是 DAO 攻击，黑客能够从智能合约中提取资金，导致价值数百万美元的以太币损失。 这导致以太坊硬分叉，并在以太坊社区中引起了很多分歧。 Protocol changes. ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:4:1","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"协议变化 即使智能合约经过多轮审核没有任何错误，我们仍然不能保证平台级别的变更不会导致其他问题。可能会存在这种情况，以太坊协议的升级，可能会导致某些智能合约和预期行为不一致。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:4:2","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"和现实世界的交流 通过预言机和现实世界交流不是很容易 确实，预言机提供了一种可信的方式将信息从现实世界获取到区块链中。 例如，它们可以提供现实世界中以太坊或上证指数的价格。 但是其他的场景，比如你租了一间公寓或一辆汽车，并造成了一些意外损坏。 智能合约在没有人为干预的情况下如何知道这些损坏？ 这样的例子还很多。 除了上述风险之外，监管或税收等方面也存在风险，但事物总是在进步，问题也总是朝着解决的方向前进。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:4:3","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"智能合约和律师 回到我们的主题，真的可以用代码代替律师吗？ 不完全是，至少现在不是。 但是在可见的未来，肯定会有越来越多的合同被自动化，尤其是在金融方面。不过即使在一个完全自动化的世界里，律师也可以提供可以转化为代码的宝贵知识。 另外，在涉及加密行业的法律方面依然存在许多监管挑战，这将使律师在一段时间内非常忙碌。 尽管如此，如果我是一名律师，我会开始考虑更多地了解智能合约和编码，因为我相信它们将在未来发挥重要作用。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:4:4","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"总结 让我们快速总结一下智能合约的优缺点。 Pros Cons fully automated software bugs deterministic results protocol changes trustless unclear regulation fast unclear tax precise secure cost efficient transparent 尽管智能合约存在一定的风险，但我们必须记住，我们还处于早期阶段，目前遇到的大多数问题都是可以解决的。 如果您对视频有任何疑问或对下一篇文章有任何建议，请留言评论。 ","date":"2021-03-07","objectID":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/:5:0","tags":["去中心化金融","DEFI","以太坊","ethereum","智能合约"],"title":"什么是智能合约 ？","uri":"/posts/defi/003%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"categories":["去中心化金融","DEFI"],"content":"去中心化金融系统教程","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"去中心化金融（DeFi）提升指南 如果您想了解去中心化金融 (DeFi)？或者想将 DeFi 提升一个水平？无论您处于 DeFi 的哪个阶段，本系列教程都适合您。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:0:0","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"说明 本指南分为 3 个级别，每个级别都包含下一个级别所需的知识、技能。这样，您将看到一个循序渐进的指南，每项技能和知识都能基于你已经掌握的信息。 去中心化金融（DeFi）是区块链发展最快的新兴产业之一，发展速度超乎我们的想象，所以本指南会不断的更新。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:1:0","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"一 、DeFi 新手 这是第一个级别，非常适合初学者。如果您以前听说过去中心化金融，但所有的概念和术语似乎都让你不知所措——这就是你最应该开始的地方。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:2:0","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"1. 什么是去中心化金融？ 从了解去中心化金融的全部内容开始。 TVL（Total Value Locked）表示不同 DeFi 项目中锁定的总价值。 DeFi Pulse ，在这里可以查看不同类别的协议，例如借贷、dexes（去中心化交易所）、衍生品、支付和资产。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:2:1","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"2. DeFi 钱包 是时候获得一个可以与 DeFi 协议交互的加密货币钱包了。安装一个我们推荐的钱包，做好准备与不同的 DeFi 协议进行交互。 这是一个有用的 Metamask指南。 当你准备好钱包时，可以向它发送一些以太坊（ETH） 。如果您还没有任何 ETH ,并且想购买它，我们建议你使用加密货币交易所，例如 Coinbase。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:2:2","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"3. 智能合约 在第一步中，我们已经了解到，去中心化金融依赖于运行在以太坊等公链上的智能合约。我们需要更近一步了解什么是智能合约。 我们可以在这里简单看看Solidity智能合约是什么样子的solidity智能合约。 如果你是一名开发人员，你可能会想更深入地研究这个主题，因为几乎所有的 DeFi 协议都是使用智能合约构建的。如果您不是开发人员，只需大致的浏览下教程就足够了，智能合约只是用于构建开放式 DeFi 协议的代码片段。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:2:3","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"4. Uniswap Uniswap 是目前最受欢迎的去中心化交易所,但它也是 DeFi 中最简单的协议之一。不可思议 Uniswap允许用户以完全去中心化、无需许可的方式交换他们的代币。在这一步中，我们只是学习 Uniswap 的基础知识。您可以在 DeFi 高级教程中更深入地了解流动性资金池和自动化做市商。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:2:4","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"5. 借贷 借贷是任何金融系统中最重要的元素之一。DeFi 借贷允许用户以完全去中心化和无需许可的方式成为贷方或借方，同时保持对自己代币的完全控制。 这是 DeFi 新手级别所需的所有知识和技能,学完就进入下一个级别【Defi探索者】。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:2:5","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"二、DeFi 探索者 到现在，您对 DeFi 新手级别包含的东西已经不再困惑。准备好更深入地了解金融的未来吧。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:3:0","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"1. 流动性资金池 我们已经在上一个级别了解了一些有关 Uniswap 的知识。现在，是时候更深入了解 Uniswap 的工作原理了。 注意：如果您决定这样做，请确保您完成下一步介绍的无常损失。如果没有这些知识，您最终可能会在不知不觉中将自己处于无常损失的状态。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:3:1","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"2. 无常损失 无常损失是决定在流动性资金池中提供流动性之前必须理解的概念之一。 为了更好地理解无常损失，您可以查看我们文章中的示例，并尝试使用Pintail这篇文章中的公式来获得相同数量的 ETH 和 DAI 。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:3:2","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"3. Yield Farming流动性挖矿 如果你关注流动性挖矿，你该知道Yield Farming 是 DeFi 中讨论最多的话题之一。简单来说，Yield farming指的是加密货币持有人借助去中心化金融（DeFi）协议创造额外收益的过程 想找到一些创造收益的机会，您可以在 Coingecko的网站上找到它们。小心不太受欢迎的流动性挖矿项目，赔钱的机会很高。如果您刚刚开始，请尝试一些主流的项目，例如 Uniswap 或 Compound。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:3:3","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"4. Yearn Finance 如果决定通过在 DeFi 中借出代币来赚钱，你很快便会意识到利率一直在变化。如果您想让您的生活更轻松并自动在不同的贷款协议之间切换，就需要了解 Yearn Finance。 Yearn Finance的主要元素是 yearn 协议，这个协议简单来说就是一个「利率最佳化器」，它做的事情就是藉由在不同的借贷间转换，让 DeFi 的获益效率最大化。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:3:4","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"5. Yearn Vaults 机枪池 您已经熟悉 Yearn 协议和流动性挖矿，是时候将这两者结合在一起了。Yearn Vaults 提供了一种简单的方式来参与单产农业，而无需花费太多的汽油费。 简单来说Yearn Vaults将资金汇集在一起，并采用预先确定的策略，以最大限度地提高整合在Vault中的基础资产的回报。 到这一步很不容易！流动资金池、AMM、流动性挖矿——这个水平是一个相当大的挑战。在这个级别中包含的一些概念可能非常困难，并且在进入下一个级别之前总是值得通过它们几次。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:3:5","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"三、DeFi 大师 是时候将您的技能提升到一个新的水平了。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:4:0","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"1. 闪电贷款 即使您不打算使用闪电贷款，这也值得了解。不需要任何抵押就可以借千百万资产，想象都不可思议。 如果您是开发人员，请查看我们的编码教程。如果您不想编码，请查看 Furucombo教程。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:4:1","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"2. Sushi Vampire Attack Vampire Attack 提出了一种尝试窃取另一个 DeFi 协议用户的有趣方式。这是一个值得理解的高级话题。 查看最初SushiSwap 。尝试回答以下问题：协议如何保护自己免受吸血鬼攻击？ ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:4:2","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"3. Ampleforth 是时候做一些全新的事情了。了解有关 Ampleforth、弹性货币供应量和重新调整基准的更多信息。Ampleforth 的模型在其他多个 DeFi 项目中也被广泛使用，因此值得了解。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:4:3","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"4. DEFI中的NFT 另一个高级主题。详细了解如何在 DeFi 中使用不可替代代币。 技能：查看一些流行的 NFT 市场，例如Rarible或OpenSea。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:4:4","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["去中心化金融","DEFI"],"content":"5. Layer2 了解 DeFi 如何使用第 2 层扩展解决方案进行扩展。 提示：尝试使用 Layer 2 上的去中心化交易所，例如xDai 上的 Honeyswap。 如果您设法完成所有级别 - 恭喜！你现在是 DeFi 大师了。不过，庆祝的时间并不多。去中心化金融发展迅速，总有新东西要学。 欢迎关注我的公众号“Doocs开源社区”，区块链前沿技术文章第一时间掌握。 ","date":"2021-03-06","objectID":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/:4:5","tags":["去中心化金融","DEFI"],"title":"去中心化金融系统教程","uri":"/posts/defi/001%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E9%87%91%E8%9E%8D%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"},{"categories":["documentation"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念.","date":"2020-03-06","objectID":"/posts/defi/images/","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/defi/images/"},{"categories":["documentation"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念.","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念. ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:0:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"1 准备 由于 Hugo 提供的便利性, Hugo 本身是这个主题唯一的依赖. 直接安装满足你操作系统 (Windows, Linux, macOS) 的最新版本  Hugo (\u003e 0.62.0). 为什么不支持早期版本的 Hugo? 由于 Markdown 渲染钩子函数 在 Hugo 圣诞节版本 中被引入, 本主题只支持高于 0.62.0 的 Hugo 版本. 推荐使用 Hugo extended 版本 由于这个主题的一些特性需要将  SCSS 转换为  CSS, 推荐使用 Hugo extended 版本来获得更好的使用体验. ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:1:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2 安装 以下步骤可帮助你初始化新网站. 如果你根本不了解 Hugo, 我们强烈建议你按照此 快速入门文档 进一步了解它. ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:2:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.1 创建你的项目 Hugo 提供了一个 new 命令来创建一个新的网站: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:2:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.2 安装主题 LoveIt 主题的仓库是: https://github.com/dillonzq/LoveIt. 你可以下载主题的 最新版本  .zip 文件 并且解压放到 themes 目录. 另外, 也可以直接把这个主题克隆到 themes 目录: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 或者, 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:2:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.3 基础配置 以下是 LoveIt 主题的基本配置: baseURL = \"http://example.org/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # 网站标题 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 作者配置 [author] name = \"xxxx\" email = \"\" link = \"\" # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false 注意 在构建网站时, 你可以使用 --theme 选项设置主题. 但是, 我建议你修改配置文件 (config.toml) 将本主题设置为默认主题. ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:2:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.4 创建你的第一篇文章 以下是创建第一篇文章的方法: hugo new posts/first_post.md 通过添加一些示例内容并替换文件开头的标题, 你可以随意编辑文章. 注意 默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/--buildDrafts 参数. ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:2:4","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.5 在本地启动网站 使用以下命令启动网站: hugo serve 去查看 http://localhost:1313. 基本配置下的预览 技巧 当你运行 hugo serve 时, 当文件内容更改时, 页面会随着更改自动刷新. 注意 由于本主题使用了 Hugo 中的 .Scratch 来实现一些特性, 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面. hugo serve --disableFastRender ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:2:5","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.6 构建网站 当你准备好部署你的网站时, 运行以下命令: hugo 会生成一个 public 目录, 其中包含你网站的所有静态内容和资源. 现在可以将其部署在任何 Web 服务器上. 技巧 网站内容可以通过 Netlify 自动发布和托管 (了解有关通过 Netlify 进行 HUGO 自动化部署 的更多信息). 或者, 您可以使用 AWS Amplify, Github pages, Render 以及更多… ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:2:6","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"3 配置 ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:3:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.1 网站配置 除了 Hugo 全局配置 和 菜单配置 之外, LoveIt 主题还允许您在网站配置中定义以下参数 (这是一个示例 config.toml, 其内容为默认值). 请打开下面的代码块查看完整的示例配置 : baseURL = \"http://example.org/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # 网站标题 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 作者配置 [author] name = \"xxxx\" email = \"\" link = \"\" # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" [params] # 网站默认主题样式 [\"auto\", \"light\", \"dark\"] defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站标题, 用于 Open Graph 和 Twitter Cards title = \"我的网站\" # 网站描述, 用于 RSS, SEO, Open Graph 和 Twitter Cards description = \"这是我的全新 Hugo 网站\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 [\"fixed\", \"normal\", \"auto\"] desktopMode = \"fixed\" # 移动端导航栏模式 [\"fixed\", \"normal\", \"auto\"] mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"我的网站\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 (允许 HTML 格式) subtitle = \"这是我的全新 Hugo 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] GitHub = \"xxxx\" Linkedin = \"\" Twitter = \"xxxx\" Instagram = \"xxxx\" Facebook = \"xxxx\" Telegram = \"xxxx\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Youtubechannel = \"\" Tumblr = \"\" Quora = \"\" Keybase = \"\" Pinterest = \"\" Reddit = \"\" Codepen = \"\" FreeCodeCamp = \"\" Bitbucket = \"\" Stackoverflow = \"\" Weibo = \"\" Odnoklassniki = \"\" VK = \"\" Flickr = \"\" Xing = \"\" Snapchat = \"\" Soundcloud = \"\" Spotify = \"\" Bandcamp = \"\" Paypal = \"\" Fivehundredpx = \"\" Mix = \"\" Goodread","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:3:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.2 网站图标, 浏览器配置, 网站清单 强烈建议你把: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在 /static 目录. 利用 https://realfavicongenerator.net/ 可以很容易地生成这些文件. 可以自定义 browserconfig.xml 和 site.webmanifest 文件来设置 theme-color 和 background-color. ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:3:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.3 自定义样式 注意 Hugo extended 版本对于自定义样式是必需的. 通过定义自定义 .scss 样式文件, LoveIt 主题支持可配置的样式. 包含自定义 .scss 样式文件的目录相对于 你的项目根目录 的路径为 assets/css. 在 assets/css/_override.scss 中, 你可以覆盖 themes/LoveIt/assets/css/_variables.scss 中的变量以自定义样式. 这是一个例子: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; 在 assets/css/_custom.scss 中, 你可以添加一些 CSS 样式代码以自定义样式. ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:3:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"4 多语言和 i18n LoveIt 主题完全兼容 Hugo 的多语言模式, 并且支持在网页上切换语言. 语言切换 ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:4:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.1 兼容性 语言 Hugo 代码 HTML lang 属性 主题文档 Lunr.js 支持 英语 en en 简体中文 zh-cn zh-CN 繁體中文 zh-tw zh-TW 法语 fr fr 波兰语 pl pl 巴西葡萄牙语 pt-br pt-BR 意大利语 it it 西班牙语 es es 德语 de de 塞尔维亚语 pl pl 俄语 ru ru 罗马尼亚语 ro ro 越南语 vi vi 阿拉伯语 ar ar 加泰罗尼亚语 ca ca 泰语 th th 泰卢固语 te te 印尼语 id id 土耳其语 tr tr 韩语 ko ko ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:4:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.2 基本配置 学习了 Hugo如何处理多语言网站 之后, 请在 站点配置 中定义你的网站语言. 例如, 一个支持英语, 中文和法语的网站配置: # 设置默认的语言 [\"en\", \"zh-cn\", \"fr\", \"pl\", ...] defaultContentLanguage = \"zh-cn\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" [[languages.en.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[languages.en.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" languageCode = \"zh-CN\" languageName = \"简体中文\" hasCJKLanguage = true [[languages.zh-cn.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" [[languages.fr.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" [[languages.fr.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Catégories\" url = \"/categories/\" title = \"\" 然后, 对于每个新页面, 将语言代码附加到文件名中. 单个文件 my-page.md 需要分为三个文件: 英语: my-page.en.md 中文: my-page.zh-cn.md 法语: my-page.fr.md 注意 请注意, 菜单中仅显示翻译的页面. 它不会替换为默认语言内容. 技巧 也可以使用 文章前置参数 来翻译网址. ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:4:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.3 修改默认的翻译字符串 翻译字符串用于在主题中使用的常见默认值. 目前提供一些语言的翻译, 但你可能自定义其他语言或覆盖默认值. 要覆盖默认值, 请在你项目的 i18n 目录 i18n/\u003clanguageCode\u003e.toml 中创建一个新文件，并从 themes/LoveIt/i18n/en.toml 中获得提示. 另外, 由于你的翻译可能会帮助到其他人, 请花点时间通过  创建一个 PR 来贡献主题翻译, 谢谢! ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:4:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"5 搜索 基于 Lunr.js 或 algolia, LoveIt 主题支持搜索功能. ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:5:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.1 输出配置 为了生成搜索功能所需要的 index.json, 请在你的 网站配置 中添加 JSON 输出文件类型到 outputs 部分的 home 字段中. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:5:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.2 搜索配置 基于 Hugo 生成的 index.json 文件, 你可以激活搜索功能. 这是你的 网站配置 中的搜索部分: [params.search] enable = true # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" 怎样选择搜索引擎? 以下是两种搜索引擎的对比: lunr: 简单, 无需同步 index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 文章内容被 h2 和 h3 HTML 标签切分来提高查询效果并且基本实现全文搜索. contentLength 用来限制 h2 和 h3 HTML 标签开头的内容部分的最大长度. 关于 algolia 的使用技巧 你需要上传 index.json 到 algolia 来激活搜索功能. 你可以使用浏览器来上传 index.json 文件但是一个自动化的脚本可能效果更好. 官方提供的 Algolia CLI 是一个不错的选择. 为了兼容 Hugo 的多语言模式, 你需要上传不同语言的 index.json 文件到对应的 algolia index, 例如 zh-cn/index.json 或 fr/index.json… ","date":"2020-03-06","objectID":"/posts/theme-documentation-basics/:5:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容.","date":"2020-03-05","objectID":"/posts/theme-documentation-content/","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容. ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:0:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"1 内容组织 以下是一些方便你清晰管理和生成文章的目录结构建议: 保持博客文章存放在 content/posts 目录, 例如: content/posts/我的第一篇文章.md 保持简单的静态页面存放在 content 目录, 例如: content/about.md 本地资源组织 本地资源引用 有三种方法来引用图片和音乐等本地资源: 使用页面包中的页面资源. 你可以使用适用于 Resources.GetMatch 的值或者直接使用相对于当前页面目录的文件路径来引用页面资源. 将本地资源放在 assets 目录中, 默认路径是 /assets. 引用资源的文件路径是相对于 assets 目录的. 将本地资源放在 static 目录中, 默认路径是 /static. 引用资源的文件路径是相对于 static 目录的. 引用的优先级符合以上的顺序. 在这个主题中的很多地方可以使用上面的本地资源引用, 例如 链接, 图片, image shortcode, music shortcode 和前置参数中的部分参数. 页面资源或者 assets 目录中的图片处理会在未来的版本中得到支持. 非常酷的功能! ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:1:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"2 前置参数 Hugo 允许你在文章内容前面添加 yaml, toml 或者 json 格式的前置参数. 注意 不是所有的以下前置参数都必须在你的每篇文章中设置. 只有在文章的参数和你的 网站设置 中的 page 部分不一致时才有必要这么做. 这是一个前置参数例子: --- title: \"我的第一篇文章\" subtitle: \"\" date: 2020-03-04T15:58:26+08:00 lastmod: 2020-03-04T15:58:26+08:00 draft: true author: \"\" authorLink: \"\" description: \"\" license: \"\" images: [] tags: [] categories: [] featuredImage: \"\" featuredImagePreview: \"\" hiddenFromHomePage: false hiddenFromSearch: false twemoji: false lightgallery: true ruby: true fraction: true fontawesome: true linkToMarkdown: true rssFullText: false toc: enable: true auto: true code: copy: true maxShownLines: 50 math: enable: false # ... mapbox: # ... share: enable: true # ... comment: enable: true # ... library: css: # someCSS = \"some.css\" # 位于 \"assets/\" # 或者 # someCSS = \"https://cdn.example.com/some.css\" js: # someJS = \"some.js\" # 位于 \"assets/\" # 或者 # someJS = \"https://cdn.example.com/some.js\" seo: images: [] # ... --- title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数, 这篇文章不会被渲染. author: 文章作者. authorLink: 文章作者的链接. description: 文章内容的描述. license: 这篇文章特殊的许可. images: 页面图片, 用于 Open Graph 和 Twitter Cards. tags: 文章的标签. categories: 文章所属的类别. featuredImage: 文章的特色图片. featuredImagePreview: 用在主页预览的文章特色图片. hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上. hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中. twemoji: 如果设为 true, 这篇文章会使用 twemoji. lightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现. ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法. fraction: 如果设为 true, 这篇文章会使用 分数扩展语法. fontawesome: 如果设为 true, 这篇文章会使用 Font Awesome 扩展语法. linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. rssFullText: 如果设为 true, 在 RSS 中将会显示全文内容. toc: 和 网站配置 中的 params.page.toc 部分相同. code: 和 网站配置 中的 params.page.code 部分相同. math: 和 网站配置 中的 params.page.math 部分相同. mapbox: 和 网站配置 中的 params.page.mapbox 部分相同. share: 和 网站配置 中的 params.page.share 部分相同. comment: 和 网站配置 中的 params.page.comment 部分相同. library: 和 网站配置 中的 params.page.library 部分相同. seo: 和 网站配置 中的 params.page.seo 部分相同. 技巧 featuredImage 和 featuredImagePreview 支持本地资源引用的完整用法. 如果带有在前置参数中设置了 name: featured-image 或 name: featured-image-preview 属性的页面资源, 没有必要在设置 featuredImage 或 featuredImagePreview: resources: - name: featured-image src: featured-image.jpg - name: featured-image-preview src: featured-image-preview.jpg ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:2:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"3 内容摘要 LoveIt 主题使用内容摘要在主页中显示大致文章信息。Hugo 支持生成文章的摘要. 文章摘要预览 ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:3:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"自动摘要拆分 默认情况下, Hugo 自动将内容的前 70 个单词作为摘要. 你可以通过在 网站配置 中设置 summaryLength 来自定义摘要长度. 如果您要使用 CJK中文/日语/韩语 语言创建内容, 并且想使用 Hugo 的自动摘要拆分功能，请在 网站配置 中将 hasCJKLanguage 设置为 true. ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:3:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"手动摘要拆分 另外, 你也可以添加 \u003c!--more--\u003e 摘要分割符来拆分文章生成摘要. 摘要分隔符之前的内容将用作该文章的摘要. 注意 请小心输入\u003c!--more--\u003e ; 即全部为小写且没有空格. ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:3:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"前置参数摘要 你可能希望摘要不是文章开头的文字. 在这种情况下, 你可以在文章前置参数的 summary 变量中设置单独的摘要. ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:3:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"使用文章描述作为摘要 你可能希望将文章前置参数中的 description 变量的内容作为摘要. 你仍然需要在文章开头添加 \u003c!--more--\u003e 摘要分割符. 将摘要分隔符之前的内容保留为空. 然后 LoveIt 主题会将你的文章描述作为摘要. ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:3:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"摘要选择的优先级顺序 由于可以通过多种方式指定摘要, 因此了解顺序很有用. 如下: 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 但分隔符之前没有内容, 则使用描述作为摘要. 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 则将按照手动摘要拆分的方法获得摘要. 如果文章前置参数中有摘要变量, 那么将以该值作为摘要. 按照自动摘要拆分方法. 注意 不建议在摘要内容中包含富文本块元素, 这会导致渲染错误. 例如代码块, 图片, 表格等. ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:3:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"4 Markdown 基本语法 这部分内容在 Markdown 基本语法页面 中介绍. ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:4:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"5 Markdown 扩展语法 LoveIt 主题提供了一些扩展的语法便于你撰写文章. ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:5:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"Emoji 支持 这部分内容在 Emoji 支持页面 中介绍. ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:5:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"数学公式 LoveIt 基于 $\\KaTeX$ 提供数学公式的支持. 在你的 网站配置 中的 [params.math] 下面设置属性 enable = true, 并在文章的前置参数中设置属性 math: true来启用数学公式的自动渲染. $\\KaTeX$ 根据 特定的分隔符 来自动渲染公式. 技巧 有一份 $\\KaTeX$ 中支持的 $\\TeX$ 函数 清单. 注意 由于 Hugo 在渲染 Markdown 文档时会根据 _/*/\u003e\u003e 之类的语法生成 HTML 文档, 并且有些转义字符形式的文本内容 (如 \\(/\\)/\\[/\\]/\\\\) 会自动进行转义处理, 因此需要对这些地方进行额外的转义字符表达来实现自动渲染: _ -\u003e \\_ * -\u003e \\* \u003e\u003e -\u003e \\\u003e\u003e \\( -\u003e \\\\( \\) -\u003e \\\\) \\[ -\u003e \\\\[ \\] -\u003e \\\\] \\\\ -\u003e \\\\\\\\ LoveIt 主题支持 raw shortcode 以避免这些转义字符, 它可以帮助您编写原始数学公式内容. 一个 raw 示例: 行内公式: 公式块: 呈现的输出效果如下: 行内公式: 公式块: 行内公式 默认的行内公式分割符有: $ ... $ \\( ... \\) (转义的: \\\\( ... \\\\)) 例如: $c = \\pm\\sqrt{a^2 + b^2}$ 和 \\\\(f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi\\\\) 呈现的输出效果如下: $c = \\pm\\sqrt{a^2 + b^2}$ 和 \\(f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi\\) 公式块 默认的公式块分割符有: $$ ... $$ \\[ ... \\] (转义的: \\\\[ ... \\\\]) \\begin{equation} ... \\end{equation} (不编号的: \\begin{equation*} ... \\end{equation*}) \\begin{align} ... \\end{align} (不编号的: \\begin{align*} ... \\end{align*}) \\begin{alignat} ... \\end{alignat} (不编号的: \\begin{alignat*} ... \\end{alignat*}) \\begin{gather} ... \\end{gather} (不编号的: \\begin{gather*} ... \\end{gather*}) \\begin{CD} ... \\end{CD} 例如: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\\\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\] \\begin{equation*} \\rho \\frac{\\mathrm{D} \\mathbf{v}}{\\mathrm{D} t}=\\nabla \\cdot \\mathbb{P}+\\rho \\mathbf{f} \\end{equation*} \\begin{equation} \\mathbf{E}=\\sum_{i} \\mathbf{E}\\_{i}=\\mathbf{E}\\_{1}+\\mathbf{E}\\_{2}+\\mathbf{E}_{3}+\\cdots \\end{equation} \\begin{align} a\u0026=b+c \\\\\\\\ d+e\u0026=f \\end{align} \\begin{alignat}{2} 10\u0026x+\u00263\u0026y = 2 \\\\\\\\ 3\u0026x+\u002613\u0026y = 4 \\end{alignat} \\begin{gather} a=b \\\\\\\\ e=b+c \\end{gather} \\begin{CD} A @\u003ea\\\u003e\u003e B \\\\\\\\ @VbVV @AAcA \\\\\\\\ C @= D \\end{CD} 呈现的输出效果如下: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] \\begin{equation*} \\rho \\frac{\\mathrm{D} \\mathbf{v}}{\\mathrm{D} t}=\\nabla \\cdot \\mathbb{P}+\\rho \\mathbf{f} \\end{equation*} \\begin{equation} \\mathbf{E}=\\sum_{i} \\mathbf{E}_{i}=\\mathbf{E}_{1}+\\mathbf{E}_{2}+\\mathbf{E}_{3}+\\cdots \\end{equation} \\begin{align} a\u0026=b+c \\\\ d+e\u0026=f \\end{align} \\begin{alignat}{2} 10\u0026x+\u00263\u0026y = 2 \\\\ 3\u0026x+\u002613\u0026y = 4 \\end{alignat} \\begin{gather} a=b \\\\ e=b+c \\end{gather} \\begin{CD} A @\u003ea\u003e\u003e B \\\\ @VbVV @AAcA \\\\ C @= D \\end{CD} 技巧 你可以在 网站配置 中自定义行内公式和公式块的分割符. Copy-tex Copy-tex 是一个 $\\KaTeX$ 的插件. 通过这个扩展, 在选择并复制 $\\KaTeX$ 渲染的公式时, 会将其 $\\LaTeX$ 源代码复制到剪贴板. 在你的 网站配置 中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 $\\LaTeX$ 源代码. mhchem mhchem 是一个 $\\KaTeX$ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ 呈现的输出效果如下: $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:5:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"字符注音或者注释 LoveIt 主题支持一种 字符注音或者注释 Markdown 扩展语法: [Hugo]^(一个开源的静态网站生成工具) 呈现的输出效果如下: Hugo一个开源的静态网站生成工具 ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:5:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"分数 LoveIt 主题支持一种 分数 Markdown 扩展语法: [浅色]/[深色] [99]/[100] 呈现的输出效果如下: 浅色/深色 90/100 ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:5:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"Font Awesome LoveIt 主题使用 Font Awesome 作为图标库. 你同样可以在文章中轻松使用这些图标. 从 Font Awesome 网站 上获取所需的图标 class. 去露营啦! :(fas fa-campground fa-fw): 很快就回来. 真开心! :(far fa-grin-tears): 呈现的输出效果如下: 去露营啦!  很快就回来. 真开心! ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:5:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"转义字符 在某些特殊情况下 (编写这个主题文档时 ), 你的文章内容会与 Markdown 的基本或者扩展语法冲突, 并且无法避免. 转义字符语法可以帮助你渲染出想要的内容: {?X} -\u003e X 例如, 两个 : 会启用 emoji 语法. 但有时候这不是你想要的结果. 可以像这样使用转义字符语法: {?:}joy: 呈现的输出效果如下: :joy: 而不是 😂 技巧 这个方法可以间接解决一个还未解决的 Hugo 的 issue. 另一个例子是: [link{?]}(#escape-character) 呈现的输出效果如下: [link](#escape-character) 而不是 link. ","date":"2020-03-05","objectID":"/posts/theme-documentation-content/:5:6","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/posts/theme-documentation-content/"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁.","date":"2020-03-04","objectID":"/posts/theme-documentation-built-in-shortcodes/","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/posts/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. Hugo 使用 Markdown 为其简单的内容格式. 但是, Markdown 在很多方面都无法很好地支持. 你可以使用纯 HTML 来扩展可能性. 但这恰好是一个坏主意. 大家使用 Markdown, 正是因为它即使不经过渲染也可以轻松阅读. 应该尽可能避免使用 HTML 以保持内容简洁. 为了避免这种限制, Hugo 创建了 shortcodes. shortcode 是一个简单代码段, 可以生成合理的 HTML 代码, 并且符合 Markdown 的设计哲学. Hugo 附带了一组预定义的 shortcodes, 它们实现了一些非常常见的用法. 提供这些 shortcodes 是为了方便保持你的 Markdown 内容简洁. ","date":"2020-03-04","objectID":"/posts/theme-documentation-built-in-shortcodes/:0:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/posts/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode.","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode. ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:0:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"1 style 注意 Hugo extended 版本对于 style shortcode 是必需的. style shortcode 用来在你的文章中插入自定义样式. style shortcode 有两个位置参数. 第一个参数是自定义样式的内容. 它支持  SASS 中的嵌套语法, 并且 \u0026 指代这个父元素. 第二个参数是包裹你要更改样式的内容的 HTML 标签, 默认值是 div. 一个 style 示例: {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} 呈现的输出效果如下: This is a right-aligned paragraph. ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:1:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"2 link link shortcode 是 Markdown 链接语法 的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{\u003c link \"https://assemble.io\" \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} 或者 {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} 或者 {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:2:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"3 image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightGallery 两个依赖库. 支持本地资源引用的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{\u003c image src=\"/images/lighthouse.jpg\" caption=\"Lighthouse (`image`)\" src_s=\"/images/lighthouse-small.jpg\" src_l=\"/images/lighthouse-large.jpg\" \u003e}} 呈现的输出效果如下: Lighthouse (image) ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:3:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"4 admonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意 一个 注意 横幅 摘要 一个 摘要 横幅 信息 一个 信息 横幅 技巧 一个 技巧 横幅 成功 一个 成功 横幅 问题 一个 问题 横幅 警告 一个 警告 横幅 失败 一个 失败 横幅 危险 一个 危险 横幅 Bug 一个 Bug 横幅 示例 一个 示例 横幅 引用 一个 引用 横幅 admonition shortcode 有以下命名参数: type [可选] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 横幅内容是否默认展开, 默认值是 true. 一个 admonition 示例: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 呈现的输出效果如下: This is a tip 一个 技巧 横幅 ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:4:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5 mermaid mermaid shortcode 使用 Mermaid 库提供绘制图表和流程图的功能. 完整文档请查看页面 主题文档 - mermaid Shortcode. ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:5:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"6 echarts echarts shortcode 使用 ECharts 库提供数据可视化的功能. 完整文档请查看页面 主题文档 - echarts Shortcode. ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:6:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"7 mapbox mapbox shortcode 使用 Mapbox GL JS 库提供互动式地图的功能. 完整文档请查看页面 主题文档 - mapbox Shortcode. ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:7:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8 music music shortcode 基于 APlayer 和 MetingJS 库提供了一个内嵌的响应式音乐播放器. 完整文档请查看页面 主题文档 - music Shortcode. ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:8:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"9 bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 完整文档请查看页面 主题文档 - bilibili Shortcode. ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:9:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10 typeit typeit shortcode 基于 TypeIt 库提供了打字动画. 完整文档请查看页面 主题文档 - typeit Shortcode. ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:10:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"11 script script shortcode 用来在你的文章中插入  Javascript 脚本. 注意 脚本内容可以保证在所有的第三方库加载之后按顺序执行. 所以你可以自由地使用第三方库. 一个 script 示例: {{\u003c script \u003e}} console.log('Hello LoveIt!'); {{\u003c /script \u003e}} 你可以在开发者工具的控制台中看到输出. ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:11:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"12 raw raw shortcode 用来在你的文章中插入原始  HTML 内容. 一个 raw 示例: 行内公式: {{\u003c raw \u003e}}\\(\\mathbf{E}=\\sum_{i} \\mathbf{E}_{i}=\\mathbf{E}_{1}+\\mathbf{E}_{2}+\\mathbf{E}_{3}+\\cdots\\){{\u003c /raw \u003e}} 公式块: {{\u003c raw \u003e}} \\[ a=b+c \\\\ d+e=f \\] {{\u003c /raw \u003e}} 原始的带有 Markdown 语法的内容: {{\u003c raw \u003e}}**Hello**{{\u003c /raw \u003e}} 呈现的输出效果如下: 行内公式: 公式块: 原始的带有 Markdown 语法的内容: ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:12:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"13 person person shortcode 用来在你的文章中以 h-card 的格式插入个人网站链接. person shortcode 有以下命名参数: url [必需] (第一个位置参数) URL of the personal page. name [必需] (第二个位置参数) Name of the person. text [可选] (第三个位置参数) Text to display as hover tooltip of the link. picture [可选] (第四个位置参数) A picture to use as person’s avatar. nick [可选] Nickame of the person. 一个 person 示例: {{\u003c person url=\"https://evgenykuznetsov.org\" name=\"Evgeny Kuznetsov\" nick=\"nekr0z\" text=\"author of this shortcode\" picture=\"https://evgenykuznetsov.org/img/avatar.jpg\" \u003e}} 呈现的输出效果为  Evgeny Kuznetsov (nekr0z). 一个使用通用图标的 person 示例: {{\u003c person \"https://dillonzq.com/\" Dillon \"author of the LoveIt theme\" \u003e}} 呈现的输出效果为  Dillon. ","date":"2020-03-03","objectID":"/posts/theme-documentation-extended-shortcodes/:13:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/posts/theme-documentation-extended-shortcodes/"},{"categories":["Markdown"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意 这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧  将此页保存为书签，以备将来参考! ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID 要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 强调 ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 列表 ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧 如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 代码 ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments line 1 of code line 2 of code line 3 of code 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意 Hugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode. ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐 在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 链接 ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意 定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了. ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The Stormtroopocat 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The Dojocat 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧 LoveIt 主题提供了一个包含更多功能的 图片的 shortcode. 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-12-01","objectID":"/posts/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["documentation"],"content":"mermaid shortcode 使用 Mermaid 库提供绘制图表和流程图的功能.","date":"2020-03-03","objectID":"/posts/theme-documentation-mermaid-shortcode/","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/posts/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":" mermaid shortcode 使用 Mermaid 库提供绘制图表和流程图的功能. mermaid 是一个可以帮助你在文章中绘制图表和流程图的库, 类似 Markdown 的语法. 只需将你的 mermaid 代码插入 mermaid shortcode 中即可. ","date":"2020-03-03","objectID":"/posts/theme-documentation-mermaid-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/posts/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"流程图 一个 流程图 mermaid 示例: {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-mermaid-shortcode/:1:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/posts/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"时序图 一个 时序图 mermaid 示例: {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-mermaid-shortcode/:2:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/posts/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"甘特图 一个 甘特图 mermaid 示例: {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-mermaid-shortcode/:3:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/posts/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"类图 一个 类图 mermaid 示例: {{\u003c mermaid \u003e}} classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-mermaid-shortcode/:4:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/posts/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"状态图 一个 状态图 mermaid 示例: {{\u003c mermaid \u003e}} stateDiagram-v2 [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-mermaid-shortcode/:5:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/posts/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"Git 图 一个 Git 图 mermaid 示例: {{\u003c mermaid \u003e}} gitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commit {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-mermaid-shortcode/:6:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/posts/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"实体关系图 一个 实体关系图 mermaid 示例: {{\u003c mermaid \u003e}} erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-mermaid-shortcode/:7:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/posts/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"用户体验旅程图 一个 用户体验旅程图 mermaid 示例: {{\u003c mermaid \u003e}} journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-mermaid-shortcode/:8:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/posts/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"饼图 一个 饼图 mermaid 示例: {{\u003c mermaid \u003e}} pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-mermaid-shortcode/:9:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/posts/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"依赖图 一个 依赖图 mermaid 示例: {{\u003c mermaid \u003e}} requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } element test_entity { type: simulation } test_entity - satisfies -\u003e test_req {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-mermaid-shortcode/:10:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/posts/theme-documentation-mermaid-shortcode/"},{"categories":["Markdown"],"content":"Hugo 和 LoveIt 中的 Emoji 的用法指南.","date":"2019-10-01","objectID":"/posts/emoji-support/","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"Emoji 可以通过多种方式在 Hugo 项目中启用. emojify 方法可以直接在模板中调用, 或者使用行内 Shortcodes. 要全局使用 emoji, 需要在你的网站配置中设置 enableEmoji 为 true, 然后你就可以直接在文章中输入 emoji 的代码. 它们以冒号开头和结尾，并且包含 emoji 的 代码: 去露营啦! :tent: 很快就回来. 真开心! :joy: 呈现的输出效果如下: 去露营啦! ⛺ 很快就回来. 真开心! 😂 以下符号清单是 emoji 代码的非常有用的参考. ","date":"2019-10-01","objectID":"/posts/emoji-support/:0:0","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"表情与情感 ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:0","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"笑脸表情 图标 代码 图标 代码 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:1","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"爱意表情 图标 代码 图标 代码 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:2","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"吐舌头表情 图标 代码 图标 代码 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:3","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"带手的表情 图标 代码 图标 代码 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:4","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"中性表情 图标 代码 图标 代码 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:5","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"困倦的表情 图标 代码 图标 代码 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:6","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"不适的表情 图标 代码 图标 代码 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:7","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"戴帽子的表情 图标 代码 图标 代码 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:8","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"戴眼镜的表情 图标 代码 图标 代码 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:9","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"担心的表情 图标 代码 图标 代码 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:10","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"否定的表情 图标 代码 图标 代码 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:11","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"特殊打扮的表情 图标 代码 图标 代码 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:12","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"猫脸表情 图标 代码 图标 代码 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:13","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"猴脸表情 图标 代码 图标 代码 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:14","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"情感 图标 代码 图标 代码 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"/posts/emoji-support/:1:15","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"人与身体 ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:0","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"张开手掌的手势 图标 代码 图标 代码 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:1","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"部分手指的手势 图标 代码 图标 代码 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:2","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"一根手指的手势 图标 代码 图标 代码 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:3","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"握紧的手势 图标 代码 图标 代码 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:4","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"两只手 图标 代码 图标 代码 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:5","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"握住东西的手势 图标 代码 图标 代码 ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:6","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"身体部位 图标 代码 图标 代码 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:7","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"人 图标 代码 图标 代码 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:8","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"身体动作 图标 代码 图标 代码 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇‍♂️ bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:9","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"人物角色 图标 代码 图标 代码 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:10","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"幻想的人物 图标 代码 图标 代码 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:11","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"人物活动 图标 代码 图标 代码 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:12","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"体育 图标 代码 图标 代码 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:13","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"休息 图标 代码 图标 代码 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:14","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"家庭 图标 代码 图标 代码 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 💑 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:15","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"人物符号 图标 代码 图标 代码 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"/posts/emoji-support/:2:16","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"动物与自然 ","date":"2019-10-01","objectID":"/posts/emoji-support/:3:0","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"哺乳动物 图标 代码 图标 代码 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"/posts/emoji-support/:3:1","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"鸟类 图标 代码 图标 代码 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"/posts/emoji-support/:3:2","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"两栖动物 icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"/posts/emoji-support/:3:3","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"爬虫类 图标 代码 图标 代码 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"/posts/emoji-support/:3:4","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"海洋动物 图标 代码 图标 代码 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"/posts/emoji-support/:3:5","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"虫类 图标 代码 图标 代码 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"/posts/emoji-support/:3:6","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"花类植物 图标 代码 图标 代码 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"/posts/emoji-support/:3:7","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"其它植物 图标 代码 图标 代码 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"/posts/emoji-support/:3:8","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"食物与饮料 ","date":"2019-10-01","objectID":"/posts/emoji-support/:4:0","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"水果 图标 代码 图标 代码 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"/posts/emoji-support/:4:1","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"蔬菜 图标 代码 图标 代码 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"/posts/emoji-support/:4:2","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"快餐 图标 代码 图标 代码 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"/posts/emoji-support/:4:3","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"亚洲食物 图标 代码 图标 代码 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"/posts/emoji-support/:4:4","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"海鲜 图标 代码 图标 代码 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"/posts/emoji-support/:4:5","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"甜点 图标 代码 图标 代码 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"/posts/emoji-support/:4:6","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"饮料 图标 代码 图标 代码 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"/posts/emoji-support/:4:7","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"餐具 图标 代码 图标 代码 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"/posts/emoji-support/:4:8","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"旅游与地理 ","date":"2019-10-01","objectID":"/posts/emoji-support/:5:0","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"地图 图标 代码 图标 代码 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"/posts/emoji-support/:5:1","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"地理现象 图标 代码 图标 代码 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"/posts/emoji-support/:5:2","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"建筑物 图标 代码 图标 代码 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"/posts/emoji-support/:5:3","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"宗教建筑 图标 代码 图标 代码 ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"/posts/emoji-support/:5:4","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"其它地点 图标 代码 图标 代码 ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"/posts/emoji-support/:5:5","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"陆路运输 图标 代码 图标 代码 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"/posts/emoji-support/:5:6","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"水路运输 图标 代码 图标 代码 ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"/posts/emoji-support/:5:7","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"空中运输 图标 代码 图标 代码 ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"/posts/emoji-support/:5:8","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"旅馆 icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"/posts/emoji-support/:5:9","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"时间 图标 代码 图标 代码 ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"/posts/emoji-support/:5:10","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"天空与天气 图标 代码 图标 代码 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"/posts/emoji-support/:5:11","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"活动 ","date":"2019-10-01","objectID":"/posts/emoji-support/:6:0","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"事件 图标 代码 图标 代码 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-10-01","objectID":"/posts/emoji-support/:6:1","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"奖杯与奖牌 图标 代码 图标 代码 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"/posts/emoji-support/:6:2","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"体育运动 图标 代码 图标 代码 ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"/posts/emoji-support/:6:3","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"游戏 图标 代码 图标 代码 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"/posts/emoji-support/:6:4","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"艺术与工艺 图标 代码 图标 代码 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-10-01","objectID":"/posts/emoji-support/:6:5","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"物品 ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:0","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"服装 图标 代码 图标 代码 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:1","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"声音 图标 代码 图标 代码 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:2","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"音乐 图标 代码 图标 代码 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:3","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"乐器 图标 代码 图标 代码 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:4","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"电话 图标 代码 图标 代码 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:5","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"电脑 图标 代码 图标 代码 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:6","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"灯光与影像 图标 代码 图标 代码 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:7","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"书与纸张 图标 代码 图标 代码 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:8","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"钱 图标 代码 图标 代码 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:9","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"邮件 图标 代码 图标 代码 ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:10","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"书写 图标 代码 图标 代码 ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:11","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"办公 图标 代码 图标 代码 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:12","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"锁 图标 代码 图标 代码 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:13","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"工具 图标 代码 图标 代码 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:14","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"科学 图标 代码 图标 代码 ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:15","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"医疗 图标 代码 图标 代码 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:16","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"生活用品 图标 代码 图标 代码 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:17","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"其它物品 图标 代码 图标 代码 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"/posts/emoji-support/:7:18","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"符号 ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:0","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"交通标识 图标 代码 图标 代码 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:1","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"警告 图标 代码 图标 代码 ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:2","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"箭头 图标 代码 图标 代码 ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:3","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"宗教 图标 代码 图标 代码 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:4","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"生肖 图标 代码 图标 代码 ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:5","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"影像符号 图标 代码 图标 代码 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:6","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"数学 图标 代码 图标 代码 ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:7","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"标点符号 图标 代码 图标 代码 ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:8","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"货币 图标 代码 图标 代码 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:9","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"按键符号 图标 代码 图标 代码 #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:10","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"字母符号 图标 代码 图标 代码 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:11","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"几何符号 图标 代码 图标 代码 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:12","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"其它符合 图标 代码 图标 代码 ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"/posts/emoji-support/:8:13","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"旗帜 ","date":"2019-10-01","objectID":"/posts/emoji-support/:9:0","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"常用旗帜 图标 代码 图标 代码 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"/posts/emoji-support/:9:1","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["Markdown"],"content":"国家和地区旗帜 图标 代码 图标 代码 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"/posts/emoji-support/:9:2","tags":["emoji"],"title":"Emoji 支持","uri":"/posts/emoji-support/"},{"categories":["documentation"],"content":"echarts shortcode 使用 ECharts 库提供数据可视化的功能.","date":"2020-03-03","objectID":"/posts/theme-documentation-echarts-shortcode/","tags":["shortcodes"],"title":"主题文档 - echarts Shortcode","uri":"/posts/theme-documentation-echarts-shortcode/"},{"categories":["documentation"],"content":"echarts shortcode 使用 ECharts 库提供数据可视化的功能. ECharts 是一个帮助你生成交互式数据可视化的库. ECharts 提供了常规的 折线图, 柱状图, 散点图, 饼图, K线图, 用于统计的 盒形图, 用于地理数据可视化的 地图, 热力图, 线图, 用于关系数据可视化的 关系图, treemap, 旭日图, 多维数据可视化的 平行坐标, 还有用于 BI 的 漏斗图, 仪表盘, 并且支持图与图之间的混搭. 只需在 echarts shortcode 中以 JSON/YAML/TOML格式插入 ECharts 选项即可. 一个 JSON 格式的 echarts 示例: {{\u003c echarts \u003e}} { \"title\": { \"text\": \"折线统计图\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"保存为图片\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"邮件营销\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"联盟广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"视频广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"直接访问\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"搜索引擎\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} 一个 YAML 格式的 echarts 示例: {{\u003c echarts \u003e}} title: text: 折线统计图 top: 2% left: center tooltip: trigger: axis legend: data: - 邮件营销 - 联盟广告 - 视频广告 - 直接访问 - 搜索引擎 top: 10% grid: left: 5% right: 5% bottom: 5% top: 20% containLabel: true toolbox: feature: saveAsImage: title: 保存为图片 xAxis: type: category boundaryGap: false data: - 周一 - 周二 - 周三 - 周四 - 周五 - 周六 - 周日 yAxis: type: value series: - name: 邮件营销 type: line stack: 总量 data: - 120 - 132 - 101 - 134 - 90 - 230 - 210 - name: 联盟广告 type: line stack: 总量 data: - 220 - 182 - 191 - 234 - 290 - 330 - 310 - name: 视频广告 type: line stack: 总量 data: - 150 - 232 - 201 - 154 - 190 - 330 - 410 - name: 直接访问 type: line stack: 总量 data: - 320 - 332 - 301 - 334 - 390 - 330 - 320 - name: 搜索引擎 type: line stack: 总量 data: - 820 - 932 - 901 - 934 - 1290 - 1330 - 1320 {{\u003c /echarts \u003e}} 一个 TOML 格式的 echarts 示例: {{\u003c echarts \u003e}} [title] text = \"折线统计图\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"保存为图片\" [xAxis] type = \"category\" boundaryGap = false data = [ \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\" ] [yAxis] type = \"value\" [[series]] name = \"邮件营销\" type = \"line\" stack = \"总量\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"联盟广告\" type = \"line\" stack = \"总量\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"视频广告\" type = \"line\" stack = \"总量\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"直接访问\" type = \"line\" stack = \"总量\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"搜索引擎\" type = \"line\" stack = \"总量\" data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u003c /echarts \u003e}} 呈现的输出效果如下: echarts shortcode 还有以下命名参数: width [可选] (第一个位置参数) 数据可视化的宽度, 默认值是 100%. height [可选] (第二个位置参数) 数据可视化的高度, 默认值是 30rem. ","date":"2020-03-03","objectID":"/posts/theme-documentation-echarts-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - echarts Shortcode","uri":"/posts/theme-documentation-echarts-shortcode/"},{"categories":["documentation"],"content":"mapbox shortcode 使用 Mapbox GL JS 库提供互动式地图的功能.","date":"2020-03-03","objectID":"/posts/theme-documentation-mapbox-shortcode/","tags":["shortcodes"],"title":"主题文档 - mapbox Shortcode","uri":"/posts/theme-documentation-mapbox-shortcode/"},{"categories":["documentation"],"content":" mapbox shortcode 使用 Mapbox GL JS 库提供互动式地图的功能. Mapbox GL JS 是一个 JavaScript 库，它使用 WebGL, 以 vector tiles 和 Mapbox styles 为来源, 将它们渲染成互动式地图. mapbox shortcode 有以下命名参数来使用 Mapbox GL JS: lng [必需] (第一个位置参数) 地图初始中心点的经度, 以度为单位. lat [必需] (第二个位置参数) 地图初始中心点的纬度, 以度为单位. zoom [可选] (第三个位置参数) 地图的初始缩放级别, 默认值是 10. marked [可选] (第四个位置参数) 是否在地图的初始中心点添加图钉, 默认值是 true. light-style [可选] (第五个位置参数) 浅色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. dark-style [可选] (第六个位置参数) 深色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. navigation [可选] 是否添加 NavigationControl, 默认值是前置参数或者网站配置中设置的值. geolocate [可选] 是否添加 GeolocateControl, 默认值是前置参数或者网站配置中设置的值. scale [可选] 是否添加 ScaleControl, 默认值是前置参数或者网站配置中设置的值. fullscreen [可选] 是否添加 FullscreenControl, 默认值是前置参数或者网站配置中设置的值. width [可选] 地图的宽度, 默认值是 100%. height [可选] 地图的高度, 默认值是 20rem. 一个简单的 mapbox 示例: {{\u003c mapbox 121.485 31.233 12 \u003e}} 或者 {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} 呈现的输出效果如下: 一个带有自定义样式的 mapbox 示例: {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/streets-zh-v1?optimize=true\" \u003e}} 或者 {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/streets-zh-v1?optimize=true\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-mapbox-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - mapbox Shortcode","uri":"/posts/theme-documentation-mapbox-shortcode/"},{"categories":["documentation"],"content":"music shortcode 基于 APlayer 和 MetingJS 库提供了一个内嵌的响应式音乐播放器.","date":"2020-03-03","objectID":"/posts/theme-documentation-music-shortcode/","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/posts/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"music shortcode 基于 APlayer 和 MetingJS 库提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. ","date":"2020-03-03","objectID":"/posts/theme-documentation-music-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/posts/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"1 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.jpg\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-music-shortcode/:1:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/posts/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"2 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} 或者 {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-music-shortcode/:2:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/posts/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"3 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} 或者 {{\u003c music netease song 1868553 \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-music-shortcode/:3:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/posts/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"4 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. ","date":"2020-03-03","objectID":"/posts/theme-documentation-music-shortcode/:4:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/posts/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器.","date":"2020-03-03","objectID":"/posts/theme-documentation-bilibili-shortcode/","tags":["shortcodes"],"title":"主题文档 - bilibili Shortcode","uri":"/posts/theme-documentation-bilibili-shortcode/"},{"categories":["documentation"],"content":" bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV id, 例如: https://www.bilibili.com/video/BV1Sx411T7QQ 一个 bilibili 示例: {{\u003c bilibili BV1Sx411T7QQ \u003e}} 或者 {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} 呈现的输出效果如下: 如果视频包含多个部分, 则除了视频的 BV id 之外, 还需要 p, 默认值为 1, 例如: https://www.bilibili.com/video/BV1TJ411C7An?p=3 一个带有 p 参数的 bilibili 示例: {{\u003c bilibili BV1TJ411C7An 3 \u003e}} 或者 {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-bilibili-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - bilibili Shortcode","uri":"/posts/theme-documentation-bilibili-shortcode/"},{"categories":["documentation"],"content":"typeit shortcode 基于 TypeIt 库提供了打字动画.","date":"2020-03-03","objectID":"/posts/theme-documentation-typeit-shortcode/","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/posts/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"typeit shortcode 基于 TypeIt 库提供了打字动画. 只需将你需要打字动画的内容插入 typeit shortcode 中即可. ","date":"2020-03-03","objectID":"/posts/theme-documentation-typeit-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/posts/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"1 简单内容 允许使用 Markdown 格式的简单内容, 并且 不包含 富文本的块内容, 例如图像等等… 一个 typeit 示例: {{\u003c typeit \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: 另外, 你也可以自定义 HTML 标签. 一个带有 h4 标签的 typeit 示例: {{\u003c typeit tag=h4 \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-typeit-shortcode/:1:0","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/posts/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"2 代码内容 代码内容也是允许的, 并且通过使用参数 code 指定语言类型可以实习语法高亮. 一个带有 code 参数的 typeit 示例: {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-typeit-shortcode/:2:0","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/posts/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"3 分组内容 默认情况下, 所有打字动画都是同时开始的. 但是有时你可能需要按顺序开始一组 typeit 内容的打字动画. 一组具有相同 group 参数值的 typeit 内容将按顺序开始打字动画. 一个带有 group 参数的 typeit 示例: {{\u003c typeit group=paragraph \u003e}} **首先**, 这个段落开始 {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **然后**, 这个段落开始 {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/posts/theme-documentation-typeit-shortcode/:3:0","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/posts/theme-documentation-typeit-shortcode/"},{"categories":null,"content":"关于 LoveIt","date":"2019-08-02","objectID":"/about/","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"  LoveIt 是一个由  Dillon 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LeaveIt 主题 和 KeepIt 主题。 Hugo 主题 LoveIt ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特性 ","date":"2019-08-02","objectID":"/about/:1:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持 Plausible Analytics  支持 Yandex Metrica  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN  基于 lazysizes 自动转换图片为懒加载 ","date":"2019-08-02","objectID":"/about/:1:1","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"外观和布局  桌面端/移动端 响应式布局  浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 73 种社交链接  支持多达 24 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Facebook comments 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 utterances 评论系统  支持 giscus 评论系统 ","date":"2019-08-02","objectID":"/about/:1:2","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"扩展功能  支持基于 Lunr.js 或 algolia 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightGallery 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $\\KaTeX$ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 cookieconsent 的 Cookie 许可横幅  支持人物标签的 shortcode … ","date":"2019-08-02","objectID":"/about/:1:3","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"许可协议 LoveIt 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 ","date":"2019-08-02","objectID":"/about/:2:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特别感谢 LoveIt 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:3:0","tags":null,"title":"关于 LoveIt","uri":"/about/"}]